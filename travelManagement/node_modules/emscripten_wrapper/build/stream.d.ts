/// <reference types="node" />
import { EventEmitter } from 'events';
export interface IEMWOutStream {
    addListener(event: 'data', listener: (chunk: string) => void): this;
    on(event: 'data', listener: (chunk: string) => void): this;
    once(event: 'data', listener: (chunk: string) => void): this;
    prependListener(event: 'data', listener: (chunk: string) => void): this;
    prependOnceListener(event: 'data', listener: (chunk: string) => void): this;
    removeListener(event: 'data', listener: (chunk: string) => void): this;
    off(event: 'data', listener: (chunk: string) => void): this;
    removeAllListeners(event?: 'data'): this;
}
export interface IEMWInStream extends IEMWOutStream {
    readonly buffer: string;
    push(chunk: string): void;
    clear(): void;
    close(): void;
}
export declare class SimpleOutStream extends EventEmitter implements IEMWOutStream {
    push(chunk: string): void;
}
export declare class SimpleInStream extends EventEmitter implements IEMWInStream {
    buffer: string;
    private emptyFlag;
    push(chunk: string): void;
    close(): void;
    clear(): void;
    read(): number | null | undefined;
}
//# sourceMappingURL=stream.d.ts.map