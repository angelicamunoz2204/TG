"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var SimpleOutStream = /** @class */ (function (_super) {
    __extends(SimpleOutStream, _super);
    function SimpleOutStream() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SimpleOutStream.prototype.push = function (chunk) {
        this.emit('data', chunk);
    };
    return SimpleOutStream;
}(events_1.EventEmitter));
exports.SimpleOutStream = SimpleOutStream;
// stream ended
var EOF = null;
// https://web.archive.org/web/20130508062559/http://www.wlug.org.nz/EAGAIN
// if used then the stream is not closed and no magic flag is set
var EAGAIN = undefined;
var SimpleInStream = /** @class */ (function (_super) {
    __extends(SimpleInStream, _super);
    function SimpleInStream() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.buffer = '';
        _this.emptyFlag = EAGAIN;
        return _this;
    }
    SimpleInStream.prototype.push = function (chunk) {
        this.emit('data', chunk);
        this.buffer += chunk;
    };
    SimpleInStream.prototype.close = function () {
        this.buffer = '';
        this.emptyFlag = EOF;
        this.emit('close');
    };
    SimpleInStream.prototype.clear = function () {
        this.buffer = '';
        this.emptyFlag = EAGAIN;
        this.emit('clear');
    };
    SimpleInStream.prototype.read = function () {
        if (this.buffer.length === 0) {
            return this.emptyFlag;
        }
        var next = this.buffer[0];
        this.buffer = this.buffer.slice(1);
        // need to return the number
        return next.charCodeAt(0);
    };
    return SimpleInStream;
}(events_1.EventEmitter));
exports.SimpleInStream = SimpleInStream;
//# sourceMappingURL=stream.js.map