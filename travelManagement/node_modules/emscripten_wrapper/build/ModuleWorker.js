"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var WORKER_ADAPTER = {
    postMessage: function (msg, transfer) { return self.postMessage(msg, transfer); },
    addEventListener: function (_type, listener) {
        addEventListener('message', function (msg) {
            var reply = function (data, transfer) {
                if (transfer === void 0) { transfer = []; }
                return (msg.source || self).postMessage(data, transfer);
            };
            listener(msg.data, reply);
        });
    }
};
var ModuleWorker = /** @class */ (function () {
    function ModuleWorker(module, adapter) {
        if (adapter === void 0) { adapter = WORKER_ADAPTER; }
        this.module = module;
        this.adapter = adapter;
        this.module.on('ready', function () { return adapter.postMessage({ key: '-1', type: 'ready' }); });
        this.module.on('exit', function (code) { return adapter.postMessage({ key: '-1', type: 'exit', code: code }); });
        this.module.on('quit', function (status) { return adapter.postMessage({ key: '-1', type: 'quit', status: status }); });
        // start loading
        this.module.sync();
        adapter.addEventListener('message', this.onMessage.bind(this));
    }
    ModuleWorker.prototype.streamOut = function (mod, msg, run, reply) {
        return __awaiter(this, void 0, void 0, function () {
            var stdout, stdoutListener, stderr, stderrListener;
            return __generator(this, function (_a) {
                stdout = '';
                stdoutListener = function (chunk) {
                    stdout += chunk;
                    reply({ key: msg.key, type: 'stdout', chunk: chunk });
                };
                stderr = '';
                stderrListener = function (chunk) {
                    stderr += chunk;
                    reply({ key: msg.key, type: 'stderr', chunk: chunk });
                };
                try {
                    mod.stdout.on('data', stdoutListener);
                    mod.stderr.on('data', stderrListener);
                    run();
                }
                catch (error) {
                    reply({
                        key: msg.key,
                        type: 'error',
                        error: error,
                        stdout: stdout,
                        stderr: stderr
                    });
                }
                finally {
                    mod.stdout.off('data', stdoutListener);
                    mod.stderr.off('data', stderrListener);
                }
                return [2 /*return*/];
            });
        });
    };
    ModuleWorker.prototype.run = function (mod, msg, reply) {
        this.streamOut(mod, msg, function () {
            var r = mod.run(msg.args || [], msg.stdin);
            reply({
                key: msg.key,
                type: 'run',
                error: r.error,
                exitCode: r.exitCode,
                stderr: r.stderr,
                stdout: r.stdout
            });
        }, reply);
    };
    ModuleWorker.prototype.fn = function (mod, msg, reply) {
        this.streamOut(mod, msg, function () {
            var fn = mod.fn[msg.function];
            if (typeof fn !== 'function') {
                reply({
                    key: msg.key,
                    type: 'error',
                    error: new Error("invalid function " + fn),
                    stderr: '',
                    stdout: ''
                });
            }
            var returnValue = fn.apply(void 0, msg.args);
            reply({
                key: msg.key,
                type: 'fn',
                function: msg.function,
                returnValue: returnValue
            });
        }, reply);
    };
    ModuleWorker.prototype.setEnv = function (mod, msg, reply) {
        mod.environmentVariables[msg.name] = msg.value;
        reply(this.ok(msg));
    };
    ModuleWorker.prototype.stdin = function (mod, msg, reply) {
        mod.stdin.push(msg.chunk);
        reply(this.ok(msg));
    };
    ModuleWorker.prototype.ok = function (msg) {
        return {
            key: msg.key,
            type: 'ok',
        };
    };
    ModuleWorker.prototype.stdinClear = function (mod, msg, reply) {
        mod.stdin.clear();
        reply(this.ok(msg));
    };
    ModuleWorker.prototype.stdinClose = function (mod, msg, reply) {
        mod.stdin.close();
        reply(this.ok(msg));
    };
    ModuleWorker.prototype.writeTextFile = function (mod, msg, reply) {
        mod.fileSystem.writeFile(msg.path, msg.content, { encoding: 'utf8', flags: 'w' });
        reply(this.ok(msg));
    };
    ModuleWorker.prototype.writeBinaryFile = function (mod, msg, reply) {
        mod.fileSystem.writeFile(msg.path, msg.content);
        reply(this.ok(msg));
    };
    ModuleWorker.prototype.ensureDir = function (mod, msg, reply) {
        utils_1.ensureDir(mod.fileSystem, msg.path);
        reply(this.ok(msg));
    };
    ModuleWorker.prototype.readTextFile = function (mod, msg, reply) {
        var content = mod.fileSystem.readFile(msg.path, { encoding: 'utf8', flags: 'r' });
        reply({
            key: msg.key,
            type: 'readTextFile',
            path: msg.path,
            content: content
        });
    };
    ModuleWorker.prototype.readBinaryFile = function (mod, msg, reply) {
        var content = mod.fileSystem.readFile(msg.path);
        reply({
            key: msg.key,
            type: 'readBinaryFile',
            path: msg.path,
            content: content
        }, [content]);
    };
    ModuleWorker.prototype.batch = function (mod, msg, reply) {
        var replies = [];
        var transfers = [];
        for (var _i = 0, _a = msg.messages; _i < _a.length; _i++) {
            var sub = _a[_i];
            this.handleModuleMessage(mod, sub, function (reply, t) {
                if (t === void 0) { t = []; }
                replies.push(reply);
                transfers.push.apply(transfers, t);
            });
        }
        reply({
            key: msg.key,
            type: 'batch',
            replies: replies
        });
    };
    ModuleWorker.prototype.handleModuleMessage = function (mod, msg, reply) {
        switch (msg.type || 'unknown') {
            case 'run':
                return this.run(mod, msg, reply);
            case 'fn':
                return this.fn(mod, msg, reply);
            case 'stdin':
                return this.stdin(mod, msg, reply);
            case 'stdinClear':
                return this.stdinClear(mod, msg, reply);
            case 'stdinClose':
                return this.stdinClose(mod, msg, reply);
            case 'setEnv':
                return this.setEnv(mod, msg, reply);
            case 'ensureDir':
                return this.ensureDir(mod, msg, reply);
            case 'writeTextFile':
                return this.writeTextFile(mod, msg, reply);
            case 'writeBinaryFile':
                return this.writeBinaryFile(mod, msg, reply);
            case 'readTextFile':
                return this.readTextFile(mod, msg, reply);
            case 'readBinaryFile':
                return this.readBinaryFile(mod, msg, reply);
            case 'batch':
                return this.batch(mod, msg, reply);
            default: {
                console.log('unknown message type', msg);
            }
        }
    };
    ModuleWorker.prototype.handleMessage = function (msg, reply) {
        var _this = this;
        this.module.sync().then(function (mod) { return _this.handleModuleMessage(mod, msg, reply); });
    };
    ModuleWorker.prototype.onMessage = function (msg, reply) {
        if (!msg.type || !msg.key) {
            console.log('no message type or key given');
        }
        this.handleMessage(msg, reply);
    };
    return ModuleWorker;
}());
exports.ModuleWorker = ModuleWorker;
//# sourceMappingURL=ModuleWorker.js.map