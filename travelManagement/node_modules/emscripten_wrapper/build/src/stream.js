import { EventEmitter } from 'events';
export class SimpleOutStream extends EventEmitter {
    push(chunk) {
        this.emit('data', chunk);
    }
}
// stream ended
const EOF = null;
// https://web.archive.org/web/20130508062559/http://www.wlug.org.nz/EAGAIN
// if used then the stream is not closed and no magic flag is set
const EAGAIN = undefined;
export class SimpleInStream extends EventEmitter {
    constructor() {
        super(...arguments);
        this.buffer = '';
        this.emptyFlag = EAGAIN;
    }
    push(chunk) {
        this.emit('data', chunk);
        this.buffer += chunk;
    }
    close() {
        this.buffer = '';
        this.emptyFlag = EOF;
        this.emit('close');
    }
    clear() {
        this.buffer = '';
        this.emptyFlag = EAGAIN;
        this.emit('clear');
    }
    read() {
        if (this.buffer.length === 0) {
            return this.emptyFlag;
        }
        const next = this.buffer[0];
        this.buffer = this.buffer.slice(1);
        // need to return the number
        return next.charCodeAt(0);
    }
}
//# sourceMappingURL=stream.js.map