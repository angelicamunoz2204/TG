var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ensureDir } from './utils';
const WORKER_ADAPTER = {
    postMessage: (msg, transfer) => self.postMessage(msg, transfer),
    addEventListener: (_type, listener) => {
        addEventListener('message', (msg) => {
            const reply = (data, transfer = []) => (msg.source || self).postMessage(data, transfer);
            listener(msg.data, reply);
        });
    }
};
export class ModuleWorker {
    constructor(module, adapter = WORKER_ADAPTER) {
        this.module = module;
        this.adapter = adapter;
        this.module.on('ready', () => adapter.postMessage({ key: '-1', type: 'ready' }));
        this.module.on('exit', (code) => adapter.postMessage({ key: '-1', type: 'exit', code }));
        this.module.on('quit', (status) => adapter.postMessage({ key: '-1', type: 'quit', status }));
        // start loading
        this.module.sync();
        adapter.addEventListener('message', this.onMessage.bind(this));
    }
    streamOut(mod, msg, run, reply) {
        return __awaiter(this, void 0, void 0, function* () {
            let stdout = '';
            const stdoutListener = (chunk) => {
                stdout += chunk;
                reply({ key: msg.key, type: 'stdout', chunk });
            };
            let stderr = '';
            const stderrListener = (chunk) => {
                stderr += chunk;
                reply({ key: msg.key, type: 'stderr', chunk });
            };
            try {
                mod.stdout.on('data', stdoutListener);
                mod.stderr.on('data', stderrListener);
                run();
            }
            catch (error) {
                reply({
                    key: msg.key,
                    type: 'error',
                    error,
                    stdout,
                    stderr
                });
            }
            finally {
                mod.stdout.off('data', stdoutListener);
                mod.stderr.off('data', stderrListener);
            }
        });
    }
    run(mod, msg, reply) {
        this.streamOut(mod, msg, () => {
            const r = mod.run(msg.args || [], msg.stdin);
            reply({
                key: msg.key,
                type: 'run',
                error: r.error,
                exitCode: r.exitCode,
                stderr: r.stderr,
                stdout: r.stdout
            });
        }, reply);
    }
    fn(mod, msg, reply) {
        this.streamOut(mod, msg, () => {
            const fn = mod.fn[msg.function];
            if (typeof fn !== 'function') {
                reply({
                    key: msg.key,
                    type: 'error',
                    error: new Error(`invalid function ${fn}`),
                    stderr: '',
                    stdout: ''
                });
            }
            const returnValue = fn(...msg.args);
            reply({
                key: msg.key,
                type: 'fn',
                function: msg.function,
                returnValue
            });
        }, reply);
    }
    setEnv(mod, msg, reply) {
        mod.environmentVariables[msg.name] = msg.value;
        reply(this.ok(msg));
    }
    stdin(mod, msg, reply) {
        mod.stdin.push(msg.chunk);
        reply(this.ok(msg));
    }
    ok(msg) {
        return {
            key: msg.key,
            type: 'ok',
        };
    }
    stdinClear(mod, msg, reply) {
        mod.stdin.clear();
        reply(this.ok(msg));
    }
    stdinClose(mod, msg, reply) {
        mod.stdin.close();
        reply(this.ok(msg));
    }
    writeTextFile(mod, msg, reply) {
        mod.fileSystem.writeFile(msg.path, msg.content, { encoding: 'utf8', flags: 'w' });
        reply(this.ok(msg));
    }
    writeBinaryFile(mod, msg, reply) {
        mod.fileSystem.writeFile(msg.path, msg.content);
        reply(this.ok(msg));
    }
    ensureDir(mod, msg, reply) {
        ensureDir(mod.fileSystem, msg.path);
        reply(this.ok(msg));
    }
    readTextFile(mod, msg, reply) {
        const content = mod.fileSystem.readFile(msg.path, { encoding: 'utf8', flags: 'r' });
        reply({
            key: msg.key,
            type: 'readTextFile',
            path: msg.path,
            content
        });
    }
    readBinaryFile(mod, msg, reply) {
        const content = mod.fileSystem.readFile(msg.path);
        reply({
            key: msg.key,
            type: 'readBinaryFile',
            path: msg.path,
            content
        }, [content]);
    }
    batch(mod, msg, reply) {
        const replies = [];
        const transfers = [];
        for (const sub of msg.messages) {
            this.handleModuleMessage(mod, sub, (reply, t = []) => {
                replies.push(reply);
                transfers.push(...t);
            });
        }
        reply({
            key: msg.key,
            type: 'batch',
            replies
        });
    }
    handleModuleMessage(mod, msg, reply) {
        switch (msg.type || 'unknown') {
            case 'run':
                return this.run(mod, msg, reply);
            case 'fn':
                return this.fn(mod, msg, reply);
            case 'stdin':
                return this.stdin(mod, msg, reply);
            case 'stdinClear':
                return this.stdinClear(mod, msg, reply);
            case 'stdinClose':
                return this.stdinClose(mod, msg, reply);
            case 'setEnv':
                return this.setEnv(mod, msg, reply);
            case 'ensureDir':
                return this.ensureDir(mod, msg, reply);
            case 'writeTextFile':
                return this.writeTextFile(mod, msg, reply);
            case 'writeBinaryFile':
                return this.writeBinaryFile(mod, msg, reply);
            case 'readTextFile':
                return this.readTextFile(mod, msg, reply);
            case 'readBinaryFile':
                return this.readBinaryFile(mod, msg, reply);
            case 'batch':
                return this.batch(mod, msg, reply);
            default: {
                console.log('unknown message type', msg);
            }
        }
    }
    handleMessage(msg, reply) {
        this.module.sync().then((mod) => this.handleModuleMessage(mod, msg, reply));
    }
    onMessage(msg, reply) {
        if (!msg.type || !msg.key) {
            console.log('no message type or key given');
        }
        this.handleMessage(msg, reply);
    }
}
//# sourceMappingURL=ModuleWorker.js.map