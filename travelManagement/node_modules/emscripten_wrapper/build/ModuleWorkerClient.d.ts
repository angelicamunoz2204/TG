/// <reference types="node" />
import { EventEmitter } from 'events';
import { IModuleMessage, IReplyMessage } from './ModuleWorker';
import { SimpleInStream, SimpleOutStream } from './stream';
import { IEMWOptions, Promisified, ISimpleFS } from './utils';
import { IEMWMainPromise, IEMWWrapper, IRunResult } from './wrapper';
export interface IEMWWorkerClient<T = {}> extends IEMWWrapper {
    /**
     * object of exposed functions
     */
    readonly fn: Promisified<T>;
    readonly simpleFileSystem: ISimpleFS;
    addListener(event: 'ready', listener: () => void): this;
    addListener(event: 'error', listener: (err: Error) => void): this;
    addListener(event: 'exit', listener: (code: number) => void): this;
    addListener(event: 'quit', listener: (status: number) => void): this;
    on(event: 'ready', listener: () => void): this;
    on(event: 'error', listener: (err: Error) => void): this;
    on(event: 'exit', listener: (code: number) => void): this;
    on(event: 'quit', listener: (status: number) => void): this;
    once(event: 'ready', listener: () => void): this;
    once(event: 'error', listener: (err: Error) => void): this;
    once(event: 'exit', listener: (code: number) => void): this;
    once(event: 'quit', listener: (status: number) => void): this;
    prependListener(event: 'ready', listener: () => void): this;
    prependListener(event: 'error', listener: (err: Error) => void): this;
    prependListener(event: 'exit', listener: (code: number) => void): this;
    prependListener(event: 'quit', listener: (status: number) => void): this;
    prependOnceListener(event: 'ready', listener: () => void): this;
    prependOnceListener(event: 'error', listener: (err: Error) => void): this;
    prependOnceListener(event: 'exit', listener: (code: number) => void): this;
    prependOnceListener(event: 'quit', listener: (status: number) => void): this;
    removeListener(event: 'ready', listener: () => void): this;
    removeListener(event: 'error', listener: (err: Error) => void): this;
    removeListener(event: 'exit', listener: (code: number) => void): this;
    removeListener(event: 'quit', listener: (status: number) => void): this;
    off(event: 'ready', listener: () => void): this;
    off(event: 'error', listener: (err: Error) => void): this;
    off(event: 'exit', listener: (code: number) => void): this;
    off(event: 'quit', listener: (status: number) => void): this;
    removeAllListeners(event?: 'ready'): this;
    removeAllListeners(event?: 'error'): this;
    removeAllListeners(event?: 'exit'): this;
    removeAllListeners(event?: 'quit'): this;
}
export interface IWorkerLike {
    addEventListener(type: 'message', callback: (msg: MessageEvent) => void): void;
    postMessage(msg: any, transfer?: Transferable[]): void;
    terminate(): void;
}
export declare class ModuleWorkerClient<T = {}> extends EventEmitter implements IEMWWorkerClient<T>, IEMWMainPromise {
    protected readonly worker: IWorkerLike;
    readonly fn: Promisified<T>;
    readonly environmentVariables: {
        [key: string]: string;
    };
    readonly simpleFileSystem: ISimpleFS;
    readonly stdout: SimpleOutStream;
    readonly stderr: SimpleOutStream;
    readonly stdin: SimpleInStream;
    private keyCounter;
    constructor(worker: IWorkerLike, options?: Partial<IEMWOptions>);
    protected nextKey(): string;
    protected postMessage(msg: IModuleMessage & {
        [key: string]: any;
    }, transfer?: Transferable[]): void;
    private onMessage;
    protected sendAndWait<MSG, R>(msg: {
        type: string;
        [key: string]: any;
    }, transfer: Transferable[], filter: (msg: IReplyMessage) => boolean, handle: (v: MSG) => R): Promise<R>;
    protected sendAndWaitOK(msg: {
        type: string;
        [key: string]: any;
    }, transfer?: Transferable[]): Promise<true>;
    main(args?: string[]): Promise<number>;
    run(args?: string[], stdin?: string): Promise<IRunResult>;
    kill(): void;
    emit(event: 'ready'): boolean;
    emit(event: 'error', err: Error): boolean;
    emit(event: 'message', message: IReplyMessage): boolean;
    emit(event: 'exit', code: number): boolean;
    emit(event: 'quit', status: number): boolean;
}
//# sourceMappingURL=ModuleWorkerClient.d.ts.map