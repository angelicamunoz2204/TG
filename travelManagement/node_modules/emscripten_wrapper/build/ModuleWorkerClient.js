"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var stream_1 = require("./stream");
var ModuleWorkerClient = /** @class */ (function (_super) {
    __extends(ModuleWorkerClient, _super);
    function ModuleWorkerClient(worker, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        _this.worker = worker;
        _this.stdout = new stream_1.SimpleOutStream();
        _this.stderr = new stream_1.SimpleOutStream();
        _this.stdin = new stream_1.SimpleInStream();
        _this.keyCounter = 0;
        _this.worker.addEventListener('message', _this.onMessage.bind(_this));
        _this.on('message', function (msg) {
            switch (msg.type) {
                case 'ready':
                    _this.emit('ready');
                    break;
                case 'exit':
                    _this.emit('exit', msg.code);
                    break;
                case 'quit':
                    _this.emit('quit', msg.status);
                    break;
                case 'stdout':
                    _this.stdout.push(msg.chunk);
                    break;
                case 'stderr':
                    _this.stderr.push(msg.chunk);
                    break;
                case 'error':
                    _this.emit('error', msg.error);
                    break;
            }
        });
        _this.stdin.on('data', function (chunk) { return _this.postMessage({ key: _this.nextKey(), type: 'stdin', chunk: chunk }); });
        _this.stdin.on('clear', function () { return _this.postMessage({ key: _this.nextKey(), type: 'stdinClear' }); });
        _this.stdin.on('close', function () { return _this.postMessage({ key: _this.nextKey(), type: 'stdinClose' }); });
        var obj = {};
        Object.keys(options.functions || {}).forEach(function (k) {
            obj[k] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _this.sendAndWait({ type: 'fn', function: k, args: args }, [], function (msg) { return msg.type === 'fn'; }, function (msg) { return msg.returnValue; });
            };
        });
        _this.fn = obj;
        _this.simpleFileSystem = {
            ensureDir: function (path) { return _this.sendAndWaitOK({ type: 'ensureDir', path: path }); },
            writeTextFile: function (path, content) { return _this.sendAndWaitOK({ type: 'writeTextFile', path: path, content: content }); },
            writeBinaryFile: function (path, content) { return _this.sendAndWaitOK({ type: 'writeBinaryFile', path: path, content: content }); },
            readTextFile: function (path) { return _this.sendAndWait({ type: 'readTextFile', path: path }, [], function (msg) { return msg.type === 'readTextFile'; }, function (msg) { return msg.content; }); },
            readBinaryFile: function (path) { return _this.sendAndWait({ type: 'readBinaryFile', path: path }, [], function (msg) { return msg.type === 'readBinaryFile'; }, function (msg) { return msg.content; }); }
        };
        _this.environmentVariables = new Proxy({}, {
            get: function (obj, prop) {
                return obj[prop];
            },
            set: function (obj, prop, value) {
                obj[prop] = value;
                // forward to worker
                _this.postMessage({ key: _this.nextKey(), type: 'setEnv', name: prop, value: value });
                return true;
            }
        });
        return _this;
    }
    ModuleWorkerClient.prototype.nextKey = function () {
        return (this.keyCounter++).toString();
    };
    ModuleWorkerClient.prototype.postMessage = function (msg, transfer) {
        if (transfer === void 0) { transfer = []; }
        this.worker.postMessage(msg, transfer);
    };
    ModuleWorkerClient.prototype.onMessage = function (ev) {
        var msg = ev.data;
        if (!msg.type || !msg.key) {
            console.log('no message type or key given');
        }
        this.emit('message', msg);
    };
    ModuleWorkerClient.prototype.sendAndWait = function (msg, transfer, filter, handle) {
        var _this = this;
        return new Promise(function (resolve) {
            var key = _this.nextKey();
            var listener = function (msg) {
                if (msg.key !== key || !filter(msg)) {
                    return;
                }
                _this.off('message', listener);
                resolve(handle(msg));
            };
            _this.on('message', listener);
            _this.postMessage(Object.assign({ key: key }, msg), transfer);
        });
    };
    ModuleWorkerClient.prototype.sendAndWaitOK = function (msg, transfer) {
        if (transfer === void 0) { transfer = []; }
        return this.sendAndWait(msg, transfer, function (msg) { return msg.type === 'ok'; }, function () { return true; });
    };
    ModuleWorkerClient.prototype.main = function (args) {
        return this.run(args).then(function (r) { return r.exitCode; });
    };
    ModuleWorkerClient.prototype.run = function (args, stdin) {
        if (args === void 0) { args = []; }
        return this.sendAndWait({ type: 'run', args: args, stdin: stdin }, [], function (msg) { return msg.type === 'run'; }, function (msg) {
            return {
                error: msg.error,
                exitCode: msg.exitCode,
                stderr: msg.stderr,
                stdout: msg.stdout
            };
        });
    };
    ModuleWorkerClient.prototype.kill = function () {
        this.worker.terminate();
    };
    ModuleWorkerClient.prototype.emit = function (event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return _super.prototype.emit.apply(this, [event].concat(args));
    };
    return ModuleWorkerClient;
}(events_1.EventEmitter));
exports.ModuleWorkerClient = ModuleWorkerClient;
//# sourceMappingURL=ModuleWorkerClient.js.map