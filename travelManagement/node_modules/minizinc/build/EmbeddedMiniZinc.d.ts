import { IMiniZincModule, ISolverModule } from 'minizinc-js';
import { IDataObject, IMiniZinc, IMiniZincOptions, IMiniZincSolveOptions, IModelParams, IResult, IMiniZincConstructorOptions, IMiniZincSolveRawOptions } from './interfaces';
export interface IEmbeddedMiniZincOptions extends IMiniZincConstructorOptions {
    /**
     * load the underlying compiler modules as soon as possible and not when they are used first
     * @default false
     */
    eagerLoad: boolean;
    /**
     * minizinc module to use
     * @default wasm version
     */
    mzn: IMiniZincModule;
    /**
     * gecode module to use
     * @default wasm version
     */
    solvers: ISolverModule[];
}
export default class EmbeddedMiniZinc implements IMiniZinc {
    private readonly options;
    private readonly mzn;
    private readonly solvers;
    constructor(options?: Partial<IEmbeddedMiniZincOptions>);
    solve(paramsOrCode: IModelParams | string, data?: IDataObject | string, options?: Partial<IMiniZincSolveOptions>): Promise<IResult>;
    solveRaw(paramsOrCode: string | IModelParams, data?: IDataObject | string, options?: Partial<IMiniZincSolveRawOptions>): Promise<string>;
    analyze(paramsOrCode: string | IModelParams, options?: Partial<IMiniZincOptions>): Promise<import("./interfaces").IModelMetaData>;
    protected runImpl(args: string[], stdin?: string): Promise<import("emscripten_wrapper").IRunResult>;
    resolveSolvers(): Promise<import("./interfaces").ISolverConfiguration[]>;
    version(): Promise<string>;
    terminate(): Promise<boolean>;
}
//# sourceMappingURL=EmbeddedMiniZinc.d.ts.map