"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var WorkerMiniZinc_1 = tslib_1.__importDefault(require("./internal/WorkerMiniZinc"));
var minizinc_js_1 = tslib_1.__importDefault(require("minizinc-js"));
var gecode_js_1 = tslib_1.__importDefault(require("gecode-js"));
var child_process_1 = require("child_process");
var path_1 = require("path");
function forkAdapter(module) {
    var path = path_1.resolve(__dirname, 'internal', 'ForkModuleWorker.js');
    var forked = child_process_1.fork(path, [module]);
    return {
        addEventListener: function (_type, listener) { return forked.on('message', function (data) { return listener({ type: 'message', data: data }); }); },
        postMessage: function (msg) { return forked.send(msg); },
        terminate: function () { return forked.kill(); }
    };
}
function createSolver(module, moduleName) {
    return {
        info: module,
        create: function () { return module.createWorkerClient(forkAdapter(moduleName)); }
    };
}
var ForkWorkerMiniZinc = /** @class */ (function (_super) {
    tslib_1.__extends(ForkWorkerMiniZinc, _super);
    function ForkWorkerMiniZinc(options) {
        return _super.call(this, {
            mzn: function () { return minizinc_js_1.default.createWorkerClient(forkAdapter('minizinc-js')); },
            solvers: [
                createSolver(gecode_js_1.default, 'gecode-js')
            ],
            extraIncludeFiles: options.extraIncludeFiles
        }) || this;
    }
    return ForkWorkerMiniZinc;
}(WorkerMiniZinc_1.default));
exports.default = ForkWorkerMiniZinc;
//# sourceMappingURL=ForkWorkerMiniZinc.js.map