"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fs_extra_1 = require("fs-extra");
var interfaces_1 = require("./interfaces");
var os_1 = require("os");
var path_1 = require("path");
var common_1 = require("./internal/common");
var parseError_1 = tslib_1.__importDefault(require("./output/parseError"));
var result_1 = require("./output/result");
var cli_1 = tslib_1.__importStar(require("./internal/cli"));
var logic_1 = require("./internal/logic");
var cli_2 = require("./internal/cli");
exports.isCLIAvailable = cli_2.isCLIAvailable;
// export interface ICLIMiniZincOptions extends IMiniZincConstructorOptions {
//   // TODO
// }
var CLIMiniZinc = /** @class */ (function () {
    function CLIMiniZinc(options) {
        if (options === void 0) { options = {}; }
        this.options = options;
    }
    CLIMiniZinc.prototype.solve = function (paramsOrCode, data, options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var params, tmpDir, _a, modelFile_1, dataFile_1, _b, args, model, filteredData, includePath, analyzed, builder_1, stderr_1, builderHelper, e_1;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        params = typeof paramsOrCode === 'string' ? { model: paramsOrCode } : paramsOrCode;
                        tmpDir = '';
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 10, 11, 14]);
                        return [4 /*yield*/, fs_extra_1.mkdtemp("" + os_1.tmpdir() + path_1.sep)];
                    case 2:
                        tmpDir = _c.sent();
                        if (options.signal && options.signal.aborted) {
                            throw new interfaces_1.AbortException();
                        }
                        _a = common_1.toFileNames(options.fileName, tmpDir, path_1.sep, data), modelFile_1 = _a.modelFile, dataFile_1 = _a.dataFile;
                        _b = common_1.toSolveArguments(params, modelFile_1, dataFile_1, true, data), args = _b.args, model = _b.model, filteredData = _b.filteredData;
                        return [4 /*yield*/, cli_1.simpleFileSystem.ensureDir(tmpDir)];
                    case 3:
                        _c.sent();
                        return [4 /*yield*/, cli_1.simpleFileSystem.writeTextFile(modelFile_1, model)];
                    case 4:
                        _c.sent();
                        return [4 /*yield*/, logic_1.createExtraIncludeFiles(tmpDir, path_1.sep, cli_1.simpleFileSystem, Object.assign({}, this.options.extraIncludeFiles || {}, options.extraIncludeFiles || {}))];
                    case 5:
                        includePath = (_c.sent()).includePath;
                        if (includePath) {
                            args.unshift('-I', includePath);
                        }
                        if (!filteredData) return [3 /*break*/, 7];
                        return [4 /*yield*/, cli_1.simpleFileSystem.writeTextFile(dataFile_1, filteredData)];
                    case 6:
                        _c.sent();
                        _c.label = 7;
                    case 7:
                        if (options.signal && options.signal.aborted) {
                            throw new interfaces_1.AbortException();
                        }
                        return [4 /*yield*/, this.analyzeImpl(modelFile_1, params, includePath, options.signal)];
                    case 8:
                        analyzed = _c.sent();
                        builder_1 = new result_1.ResultBuilder(analyzed, params, options.onPartialResult);
                        stderr_1 = '';
                        builderHelper = {
                            pushSTDOut: function (chunk) { return builder_1.push(chunk); },
                            pushSTDErr: function (chunk) { return stderr_1 += chunk; },
                            build: function (code) {
                                if (code) {
                                    throw new interfaces_1.BackendException(parseError_1.default(stderr_1, modelFile_1, dataFile_1));
                                }
                                return builder_1.build();
                            }
                        };
                        return [4 /*yield*/, cli_1.runBuilder(args, builderHelper, undefined, options.signal)];
                    case 9: return [2 /*return*/, _c.sent()];
                    case 10:
                        e_1 = _c.sent();
                        console.warn('error caught', e_1);
                        throw e_1;
                    case 11:
                        if (!tmpDir) return [3 /*break*/, 13];
                        return [4 /*yield*/, fs_extra_1.remove(tmpDir)];
                    case 12:
                        _c.sent();
                        _c.label = 13;
                    case 13: return [7 /*endfinally*/];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    CLIMiniZinc.prototype.solveRaw = function (paramsOrCode, data, options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var params, tmpDir, _a, modelFile, dataFile, _b, args, model, filteredData, includePath, stdout_1, onChunk, builderHelper, e_2;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        params = typeof paramsOrCode === 'string' ? { model: paramsOrCode } : paramsOrCode;
                        tmpDir = '';
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 9, 10, 13]);
                        return [4 /*yield*/, fs_extra_1.mkdtemp("" + os_1.tmpdir() + path_1.sep)];
                    case 2:
                        tmpDir = _c.sent();
                        if (options.signal && options.signal.aborted) {
                            throw new interfaces_1.AbortException();
                        }
                        _a = common_1.toFileNames(options.fileName, tmpDir, path_1.sep, data), modelFile = _a.modelFile, dataFile = _a.dataFile;
                        _b = common_1.toSolveArguments(params, modelFile, dataFile, options.stats !== false, data), args = _b.args, model = _b.model, filteredData = _b.filteredData;
                        return [4 /*yield*/, cli_1.simpleFileSystem.ensureDir(tmpDir)];
                    case 3:
                        _c.sent();
                        return [4 /*yield*/, cli_1.simpleFileSystem.writeTextFile(modelFile, model)];
                    case 4:
                        _c.sent();
                        return [4 /*yield*/, logic_1.createExtraIncludeFiles(tmpDir, path_1.sep, cli_1.simpleFileSystem, Object.assign({}, this.options.extraIncludeFiles || {}, options.extraIncludeFiles || {}))];
                    case 5:
                        includePath = (_c.sent()).includePath;
                        if (includePath) {
                            args.unshift('-I', includePath);
                        }
                        if (!filteredData) return [3 /*break*/, 7];
                        return [4 /*yield*/, cli_1.simpleFileSystem.writeTextFile(dataFile, filteredData)];
                    case 6:
                        _c.sent();
                        _c.label = 7;
                    case 7:
                        if (options.signal && options.signal.aborted) {
                            throw new interfaces_1.AbortException();
                        }
                        stdout_1 = '';
                        onChunk = function (chunk) {
                            stdout_1 += chunk;
                            if (options.onChunk) {
                                options.onChunk(chunk.toString());
                            }
                        };
                        builderHelper = {
                            pushSTDOut: onChunk,
                            pushSTDErr: onChunk,
                            build: function () { return stdout_1; }
                        };
                        return [4 /*yield*/, cli_1.runBuilder(args, builderHelper, undefined, options.signal)];
                    case 8: return [2 /*return*/, _c.sent()];
                    case 9:
                        e_2 = _c.sent();
                        console.warn('error caught', e_2);
                        throw e_2;
                    case 10:
                        if (!tmpDir) return [3 /*break*/, 12];
                        return [4 /*yield*/, fs_extra_1.remove(tmpDir)];
                    case 11:
                        _c.sent();
                        _c.label = 12;
                    case 12: return [7 /*endfinally*/];
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    CLIMiniZinc.prototype.analyzeImpl = function (modelFile, params, includePath, signal) {
        return logic_1.analyzeImpl({
            run: function (args, stdin) { return cli_1.default(args, stdin, signal); }
        }, params, includePath ? ['-I', includePath] : [], modelFile, signal);
    };
    CLIMiniZinc.prototype.analyze = function (paramsOrCode, options) {
        if (options === void 0) { options = {}; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var params, tmpDir, modelFile, includePath, e_3;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = typeof paramsOrCode === 'string' ? { model: paramsOrCode } : paramsOrCode;
                        tmpDir = '';
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 7, 8, 11]);
                        return [4 /*yield*/, fs_extra_1.mkdtemp("" + os_1.tmpdir() + path_1.sep)];
                    case 2:
                        tmpDir = _a.sent();
                        modelFile = common_1.toFileNames(options.fileName, tmpDir, path_1.sep).modelFile;
                        return [4 /*yield*/, cli_1.simpleFileSystem.ensureDir(tmpDir)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, cli_1.simpleFileSystem.writeTextFile(modelFile, params.model)];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, logic_1.createExtraIncludeFiles(tmpDir, path_1.sep, cli_1.simpleFileSystem, Object.assign({}, this.options.extraIncludeFiles || {}, options.extraIncludeFiles || {}))];
                    case 5:
                        includePath = (_a.sent()).includePath;
                        if (options.signal && options.signal.aborted) {
                            throw new interfaces_1.AbortException();
                        }
                        return [4 /*yield*/, this.analyzeImpl(modelFile, params, includePath, options.signal)];
                    case 6: return [2 /*return*/, _a.sent()];
                    case 7:
                        e_3 = _a.sent();
                        console.warn('error caught', e_3);
                        throw e_3;
                    case 8:
                        if (!tmpDir) return [3 /*break*/, 10];
                        return [4 /*yield*/, fs_extra_1.remove(tmpDir)];
                    case 9:
                        _a.sent();
                        _a.label = 10;
                    case 10: return [7 /*endfinally*/];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    CLIMiniZinc.prototype.resolveSolvers = function () {
        return logic_1.resolveSolvers({ run: cli_1.default });
    };
    CLIMiniZinc.prototype.version = function () {
        return logic_1.version({ run: cli_1.default });
    };
    CLIMiniZinc.prototype.terminate = function () {
        return Promise.resolve(true);
    };
    return CLIMiniZinc;
}());
exports.default = CLIMiniZinc;
//# sourceMappingURL=CLIMiniZinc.js.map