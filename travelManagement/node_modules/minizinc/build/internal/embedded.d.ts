import { ISolverInfo } from 'minizinc-js';
import { IModelParams, IMiniZincOptions, IModelMetaData, IDataObject, IMiniZincSolveOptions, IResult, IMiniZincConstructorOptions, IMiniZincSolveRawOptions } from '../interfaces';
import { IRunner } from './logic';
import { ISimpleFS, IEMWOutStream } from 'emscripten_wrapper';
export interface IFSRunner extends IRunner {
    simpleFileSystem: ISimpleFS;
    stdout: IEMWOutStream;
    stderr: IEMWOutStream;
    threaded?: boolean;
}
export interface IMZNRunner extends IFSRunner {
    chooseSolver(solvers: IFSSolverRunner[], solver?: string): IFSSolverRunner | null;
}
export declare type IFSSolverRunner = IFSRunner & ISolverInfo;
export declare function analyzeEmbedded(mzn: IFSRunner, solvers: ISolverInfo[], paramsOrCode: string | IModelParams, options?: Partial<IMiniZincOptions>, coptions?: Partial<IMiniZincConstructorOptions>): Promise<IModelMetaData>;
export declare function solveEmbedded(mzn: IMZNRunner, solvers: IFSSolverRunner[], paramsOrCode: IModelParams | string, data?: IDataObject | string, options?: Partial<IMiniZincSolveOptions>, coptions?: Partial<IMiniZincConstructorOptions>): Promise<IResult>;
export declare function solveRawEmbedded(mzn: IMZNRunner, solvers: IFSSolverRunner[], paramsOrCode: IModelParams | string, data?: IDataObject | string, options?: Partial<IMiniZincSolveRawOptions>, coptions?: Partial<IMiniZincConstructorOptions>): Promise<string>;
//# sourceMappingURL=embedded.d.ts.map