"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var embedded_1 = require("../internal/embedded");
var logic_1 = require("../internal/logic");
var abort_1 = require("./abort");
var decko_1 = require("decko");
var AbortAbleWorkerWrapper = /** @class */ (function () {
    function AbortAbleWorkerWrapper(_instance, factory, destroy, signal) {
        this._instance = _instance;
        this.factory = factory;
        this.destroy = destroy;
        this.signal = signal;
        this.threaded = true;
    }
    Object.defineProperty(AbortAbleWorkerWrapper.prototype, "instance", {
        get: function () {
            if (this._instance) {
                return this._instance;
            }
            return this._instance = this.factory();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbortAbleWorkerWrapper.prototype, "simpleFileSystem", {
        get: function () {
            return this.instance.simpleFileSystem;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbortAbleWorkerWrapper.prototype, "stdout", {
        get: function () {
            return this.instance.stdout;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbortAbleWorkerWrapper.prototype, "stderr", {
        get: function () {
            return this.instance.stderr;
        },
        enumerable: true,
        configurable: true
    });
    AbortAbleWorkerWrapper.prototype.run = function (args, stdin) {
        var _this = this;
        if (!this.signal) {
            return this.instance.run(args, stdin);
        }
        if (this.signal.aborted) {
            throw new abort_1.AbortException();
        }
        var listener = function () {
            _this._instance = _this.destroy();
            throw new abort_1.AbortException();
        };
        try {
            this.signal.on('abort', listener);
            return this.instance.run(args, stdin);
        }
        finally {
            this.signal.off('abort', listener);
        }
    };
    AbortAbleWorkerWrapper.prototype.kill = function () {
        if (this._instance) {
            this._instance = this.destroy();
        }
    };
    return AbortAbleWorkerWrapper;
}());
var AbortAbleMZNWorker = /** @class */ (function (_super) {
    tslib_1.__extends(AbortAbleMZNWorker, _super);
    function AbortAbleMZNWorker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbortAbleMZNWorker.prototype.chooseSolver = function (solvers, solver) {
        return this.instance.chooseSolver(solvers, solver);
    };
    return AbortAbleMZNWorker;
}(AbortAbleWorkerWrapper));
var AbortAbleSolverWorker = /** @class */ (function (_super) {
    tslib_1.__extends(AbortAbleSolverWorker, _super);
    function AbortAbleSolverWorker(info, _instance, factory, destroy, signal) {
        var _this = _super.call(this, _instance, factory, destroy, signal) || this;
        _this.info = info;
        return _this;
    }
    Object.defineProperty(AbortAbleSolverWorker.prototype, "SOLVER_ID", {
        get: function () {
            return this.info.SOLVER_ID;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbortAbleSolverWorker.prototype, "SOLVER_MSC_FILE", {
        get: function () {
            return this.info.SOLVER_MSC_FILE;
        },
        enumerable: true,
        configurable: true
    });
    return AbortAbleSolverWorker;
}(AbortAbleWorkerWrapper));
var WorkerMiniZinc = /** @class */ (function () {
    function WorkerMiniZinc(options) {
        this.options = options;
        this.mzn = options.mzn();
        this.solvers = options.solvers.map(function () { return null; }); // don't instantiate if we don't need them
        // register them anyhow
        for (var _i = 0, _a = options.solvers; _i < _a.length; _i++) {
            var s = _a[_i];
            this.mzn.registerSolver(s.info);
        }
    }
    WorkerMiniZinc.prototype.abortAbleMzn = function (signal) {
        if (!signal) {
            return this.mzn;
        }
        return new AbortAbleMZNWorker(this.mzn, this.recreateMzn, this.recreateMzn, signal);
    };
    WorkerMiniZinc.prototype.recreateMzn = function () {
        this.mzn.kill();
        this.mzn = this.options.mzn();
        for (var _i = 0, _a = this.options.solvers; _i < _a.length; _i++) {
            var s = _a[_i];
            this.mzn.registerSolver(s.info);
        }
        return this.mzn;
    };
    WorkerMiniZinc.prototype.abortAbleSolvers = function (signal) {
        var _this = this;
        return this.options.solvers.map(function (info, index) {
            var createSolver = function () {
                if (_this.solvers[index]) {
                    _this.solvers[index].kill();
                }
                return _this.solvers[index] = info.create();
            };
            var destroySolver = function () {
                if (_this.solvers[index]) {
                    _this.solvers[index].kill();
                }
                return _this.solvers[index] = null; // don't create yet
            };
            return new AbortAbleSolverWorker(info.info, _this.solvers[index], createSolver, destroySolver, signal);
        });
    };
    WorkerMiniZinc.prototype.solve = function (paramsOrCode, data, options) {
        if (options === void 0) { options = {}; }
        return embedded_1.solveEmbedded(this.abortAbleMzn(options.signal), this.abortAbleSolvers(options.signal), paramsOrCode, data, options, this.options);
    };
    WorkerMiniZinc.prototype.solveRaw = function (paramsOrCode, data, options) {
        if (options === void 0) { options = {}; }
        return embedded_1.solveRawEmbedded(this.abortAbleMzn(options.signal), this.abortAbleSolvers(options.signal), paramsOrCode, data, options, this.options);
    };
    WorkerMiniZinc.prototype.analyze = function (paramsOrCode, options) {
        if (options === void 0) { options = {}; }
        return embedded_1.analyzeEmbedded(this.abortAbleMzn(options.signal), this.options.solvers.map((function (s) { return s.info; })), paramsOrCode, options, this.options);
    };
    WorkerMiniZinc.prototype.resolveSolvers = function () {
        return logic_1.resolveSolvers(this.mzn);
    };
    WorkerMiniZinc.prototype.version = function () {
        return logic_1.version(this.mzn);
    };
    WorkerMiniZinc.prototype.terminate = function () {
        this.mzn.kill();
        for (var _i = 0, _a = this.solvers; _i < _a.length; _i++) {
            var s = _a[_i];
            if (s) {
                s.kill();
            }
        }
        return Promise.resolve(true);
    };
    tslib_1.__decorate([
        decko_1.bind
    ], WorkerMiniZinc.prototype, "recreateMzn", null);
    return WorkerMiniZinc;
}());
exports.default = WorkerMiniZinc;
//# sourceMappingURL=WorkerMiniZinc.js.map