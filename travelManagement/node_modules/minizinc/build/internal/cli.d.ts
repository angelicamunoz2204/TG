import { IAbortSignal } from './abort';
import { IRunResult, ISimpleFS } from 'emscripten_wrapper';
export interface ISpawnResultBuilder<T> {
    pushSTDOut(chunk: string): void;
    pushSTDErr(chunk: string): void;
    build(code: number): T;
}
export declare class DefaultSpawnResultBuilder implements ISpawnResultBuilder<IRunResult> {
    private stdout;
    private stderr;
    pushSTDOut(chunk: string): void;
    pushSTDErr(chunk: string): void;
    build(code: number): {
        exitCode: number;
        stdout: string;
        stderr: string;
    };
}
export declare function isCLIAvailable(): boolean;
export declare function runBuilder<T>(args: string[], builder: ISpawnResultBuilder<T>, stdin?: string, signal?: IAbortSignal): Promise<T>;
export default function run(args: string[], stdin?: string, signal?: IAbortSignal): Promise<{
    exitCode: number;
    stdout: string;
    stderr: string;
}>;
export declare const simpleFileSystem: ISimpleFS;
//# sourceMappingURL=cli.d.ts.map