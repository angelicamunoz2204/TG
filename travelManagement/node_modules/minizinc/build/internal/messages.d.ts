import { IModelMetaData, IError, IModelParams, IDataObject, IResult, IMiniZincOptions, ISolverConfiguration, IMiniZincSolveOptions, IMiniZincSolveRawOptions } from '../interfaces';
export declare const EVENT_ANALYZE = "analyze";
export declare const EVENT_ABORT = "abort";
export declare const EVENT_VERSION = "version";
export declare const EVENT_TERMINATE = "terminate";
export declare const EVENT_SOLVE_SOLUTION = "solveSolution";
export declare const EVENT_SOLVE = "solve";
export declare const EVENT_SOLVE_RAW = "solveRaw";
export declare const EVENT_SOLVE_RAW_CHUNK = "solveRawChunk";
export declare const EVENT_RESOLVE_SOLVERS = "resolveSolvers";
export interface IVersionRequest {
    key: string;
}
export interface IVersionResponse {
    error?: IError[];
    version?: string;
}
export interface ITerminateRequest {
    key: string;
}
export interface ITerminateResponse {
    error?: IError[];
    ok?: boolean;
}
export interface IAnalyzeRequest {
    key: string;
    code: string | IModelParams;
    options?: IMiniZincOptions;
}
export interface IAnalyzeResponse {
    error?: IError[];
    metaData?: IModelMetaData;
}
export interface ISolveRequest {
    key: string;
    code: string | IModelParams;
    data?: IDataObject;
    options?: IMiniZincSolveOptions;
    streamSolutions?: boolean;
}
export interface ISolveResponse {
    error?: IError[];
    result: IResult;
}
export interface ISolveSolutionResponse {
    type: 'solution' | 'header';
    result: IResult;
}
export interface ISolveRawRequest {
    key: string;
    code: string | IModelParams;
    data?: IDataObject;
    options?: IMiniZincSolveRawOptions;
    streamChunks?: boolean;
}
export declare type ISolveRawResponse = string;
export interface IResolveSolversRequest {
    key: string;
}
export interface IResolveSolversResponse {
    error?: IError[];
    solvers: ISolverConfiguration[];
}
//# sourceMappingURL=messages.d.ts.map