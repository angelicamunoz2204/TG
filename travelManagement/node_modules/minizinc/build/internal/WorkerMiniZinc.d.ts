import { IMiniZincWorkerClient, ISolverWorkerClient, ISolverInfo } from 'minizinc-js';
import { IDataObject, IMiniZinc, IMiniZincOptions, IMiniZincSolveOptions, IModelMetaData, IModelParams, IResult, IMiniZincConstructorOptions, IMiniZincSolveRawOptions } from '../interfaces';
export interface ISolverWorkerFactory {
    info: ISolverInfo;
    create(): ISolverWorkerClient;
}
export interface IWorkerMiniZincOptions extends Partial<IMiniZincConstructorOptions> {
    mzn: () => IMiniZincWorkerClient;
    solvers: ISolverWorkerFactory[];
}
export default class WorkerMiniZinc implements IMiniZinc {
    private readonly options;
    protected mzn: IMiniZincWorkerClient;
    protected solvers: (ISolverWorkerClient | null)[];
    constructor(options: IWorkerMiniZincOptions);
    private abortAbleMzn;
    private recreateMzn;
    private abortAbleSolvers;
    solve(paramsOrCode: IModelParams | string, data?: IDataObject | string, options?: Partial<IMiniZincSolveOptions>): Promise<IResult>;
    solveRaw(paramsOrCode: string | IModelParams, data?: IDataObject | string, options?: Partial<IMiniZincSolveRawOptions>): Promise<string>;
    analyze(paramsOrCode: string | IModelParams, options?: Partial<IMiniZincOptions>): Promise<IModelMetaData>;
    resolveSolvers(): Promise<import("../interfaces").ISolverConfiguration[]>;
    version(): Promise<string>;
    terminate(): Promise<boolean>;
}
//# sourceMappingURL=WorkerMiniZinc.d.ts.map