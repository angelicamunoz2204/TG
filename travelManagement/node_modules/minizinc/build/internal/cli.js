"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var child_process_1 = require("child_process");
var fs_extra_1 = require("fs-extra");
var abort_1 = require("./abort");
var path_1 = require("path");
var miniZincPath = null;
function findMiniZinc() {
    var paths = [
        './',
        './minizinc/',
        '../',
        '../minizinc/'
    ].concat(process.env.PATH.split(path_1.delimiter));
    var suffix = '';
    if (process.platform === 'win32' || process.platform === 'cygwin') {
        suffix = '.exe';
        paths.unshift('c:/Program Files/MiniZinc', 'c:/Program Files/MiniZinc IDE (bundled)', 'c:/Program Files (x86)/MiniZinc', 'c:/Program Files (x86)/MiniZinc IDE (bundled)');
    }
    else if (process.platform === 'darwin') {
        paths.unshift('/Applications/MiniZincIDE.app/Contents/Resources', path_1.resolve('~/Applications/MiniZincIDE.app/Contents/Resources'));
    }
    return paths.map(function (d) { return path_1.resolve(d, "minizinc" + suffix); }).find(function (d) { return fs_extra_1.existsSync(d) && fs_extra_1.statSync(d).isFile(); });
}
var DefaultSpawnResultBuilder = /** @class */ (function () {
    function DefaultSpawnResultBuilder() {
        this.stdout = '';
        this.stderr = '';
    }
    DefaultSpawnResultBuilder.prototype.pushSTDOut = function (chunk) {
        this.stdout += chunk;
    };
    DefaultSpawnResultBuilder.prototype.pushSTDErr = function (chunk) {
        this.stderr += chunk;
    };
    DefaultSpawnResultBuilder.prototype.build = function (code) {
        return {
            exitCode: code,
            stdout: this.stdout,
            stderr: this.stderr
        };
    };
    return DefaultSpawnResultBuilder;
}());
exports.DefaultSpawnResultBuilder = DefaultSpawnResultBuilder;
function isCLIAvailable() {
    if (miniZincPath === null) {
        miniZincPath = findMiniZinc();
    }
    return miniZincPath != null;
}
exports.isCLIAvailable = isCLIAvailable;
function runBuilder(args, builder, stdin, signal) {
    if (miniZincPath === null) {
        miniZincPath = findMiniZinc();
    }
    if (!miniZincPath) {
        builder.pushSTDErr('MiniZinc not found');
        return Promise.resolve(builder.build(1));
    }
    return new Promise(function (resolve, reject) {
        var c = child_process_1.spawn(miniZincPath, args);
        if (stdin) {
            c.stdin.write(stdin);
        }
        var wasAborted = false;
        c.stdout.on('data', function (chunk) {
            // console.log('stdout', chunk.toString());
            builder.pushSTDOut(chunk);
        });
        c.stderr.on('data', function (chunk) {
            // console.log('stderr', chunk.toString());
            builder.pushSTDErr(chunk);
        });
        c.on('error', function (error) { return reject(error); });
        c.on('exit', function (code) {
            if (wasAborted) {
                return;
            }
            try {
                resolve(builder.build(code || 0));
            }
            catch (error) {
                reject(error);
            }
        });
        if (!signal) {
            return;
        }
        signal.on('abort', function () {
            wasAborted = true;
            c.kill();
            console.log('abort detected, reject with exception');
            reject(new abort_1.AbortException());
        });
    });
}
exports.runBuilder = runBuilder;
function run(args, stdin, signal) {
    return runBuilder(args, new DefaultSpawnResultBuilder(), stdin, signal);
}
exports.default = run;
exports.simpleFileSystem = {
    ensureDir: function (dir) { return fs_extra_1.ensureDir(dir).then(function () { return true; }); },
    readBinaryFile: function (path) { return fs_extra_1.readFile(path); },
    readTextFile: function (path) { return fs_extra_1.readFile(path, { encoding: 'utf-8' }).then(function (p) { return p.toString(); }); },
    writeBinaryFile: function (path, content) { return fs_extra_1.outputFile(path, content).then(function () { return true; }); },
    writeTextFile: function (path, content) { return fs_extra_1.outputFile(path, content, { encoding: 'utf-8' }).then(function () { return true; }); },
};
//# sourceMappingURL=cli.js.map