"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var WebWorkerMiniZinc_1 = tslib_1.__importDefault(require("../WebWorkerMiniZinc"));
var bundle_1 = tslib_1.__importDefault(require("minizinc-js/bundle"));
var bundle_2 = tslib_1.__importDefault(require("gecode-js/bundle"));
var worker_1 = tslib_1.__importDefault(require("worker-loader?name=minizinc.worker.js!minizinc-js/worker"));
var worker_2 = tslib_1.__importDefault(require("worker-loader?name=gecode.worker.js!gecode-js/worker"));
function createMiniZinc(options) {
    if (options === void 0) { options = {}; }
    var solvers = [];
    var include = new Set(options.solvers || []);
    if (include.has(bundle_2.default.SOLVER_ID) || include.has('gecode') || include.size === 0) {
        solvers.push({
            info: bundle_2.default,
            create: function () { return bundle_2.default.createWorkerClient(new worker_2.default()); }
        });
    }
    // TODO support more
    if (solvers.length === 0) {
        console.error('no solver loaded');
    }
    return new WebWorkerMiniZinc_1.default(tslib_1.__assign({ mzn: function () { return bundle_1.default.createWorkerClient(new worker_1.default()); } }, options, { solvers: solvers }));
}
exports.default = createMiniZinc;
// REST version
// import RESTMiniZinc from 'minizinc/build/RESTMiniZinc';
// export const minizinc = new RESTMiniZinc({
//   ...common
// });
// Embedded version
// import EmbeddedMiniZinc from 'minizinc/build/EmbeddedMiniZinc';
// import MZN from 'minizinc-js/bundle';
// import GECODE from 'gecode-js/bundle';
// export const minizinc = new EmbeddedMiniZinc({
//   solvers: [GECODE],
//   mzn: MZN,
//   ...common
// });
// WebWorker Embedded version
//# sourceMappingURL=workerloader.js.map