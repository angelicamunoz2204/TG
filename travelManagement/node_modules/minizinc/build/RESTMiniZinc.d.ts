import { IMiniZinc, IModelMetaData, IDataObject, IModelParams, IMiniZincOptions, IMiniZincSolveOptions, IResult, ISolverConfiguration, IMiniZincConstructorOptions, IMiniZincSolveRawOptions } from './interfaces';
export interface IRESTMiniZincOptions extends IMiniZincConstructorOptions {
    baseUrl: string;
}
export default class RESTMiniZinc implements IMiniZinc {
    private readonly options;
    constructor(options: Partial<IRESTMiniZincOptions>);
    private readonly baseUrl;
    private buildOptions;
    analyze(code: string | IModelParams, options?: Partial<IMiniZincOptions>): Promise<IModelMetaData>;
    solve(code: string | IModelParams, data?: IDataObject | string, options?: Partial<IMiniZincSolveOptions>): Promise<IResult>;
    solveRaw(code: string | IModelParams, data?: IDataObject | string, options?: Partial<IMiniZincSolveRawOptions>): Promise<string>;
    resolveSolvers(): Promise<ISolverConfiguration[]>;
    version(): Promise<string>;
    terminate(): Promise<boolean>;
}
//# sourceMappingURL=RESTMiniZinc.d.ts.map