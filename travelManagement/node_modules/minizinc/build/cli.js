"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var driver_1 = tslib_1.__importDefault(require("./driver"));
var yargs_1 = tslib_1.__importDefault(require("yargs"));
var fs_extra_1 = require("fs-extra");
var driver = driver_1.default();
function solve(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var model, params, data, r, r, r;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fs_extra_1.readFile(args.model).then(function (r) { return r.toString(); })];
                case 1:
                    model = _a.sent();
                    params = {
                        model: model
                    };
                    data = undefined;
                    if (!args.data) return [3 /*break*/, 3];
                    return [4 /*yield*/, fs_extra_1.readFile(args.data).then(function (r) { return r.toString(); })];
                case 2:
                    r = _a.sent();
                    data = args.data.endsWith('.json') ? JSON.parse(r) : r;
                    _a.label = 3;
                case 3:
                    if (args.solver) {
                        params.solver = args.solver;
                    }
                    if (args.n != null) {
                        params.nr_solutions = args.n;
                    }
                    if (args.f) {
                        params.free_search = true;
                    }
                    if (args.a) {
                        params.all_solutions = true;
                    }
                    if (args.parallel != null) {
                        params.processes = args.parallel;
                    }
                    if (args.r != null) {
                        params.random_seed = args.r;
                    }
                    if (!args.raw) return [3 /*break*/, 5];
                    return [4 /*yield*/, driver.solveRaw(params, data)];
                case 4:
                    r = _a.sent();
                    console.log(r);
                    return [3 /*break*/, 7];
                case 5: return [4 /*yield*/, driver.solve(params)];
                case 6:
                    r = _a.sent();
                    console.log(JSON.stringify(r, null, 2));
                    _a.label = 7;
                case 7: return [2 /*return*/];
            }
        });
    });
}
function analyze(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var model, params, r;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fs_extra_1.readFile(args.model).then(function (r) { return r.toString(); })];
                case 1:
                    model = _a.sent();
                    params = {
                        model: model
                    };
                    if (args.solver) {
                        params.solver = args.solver;
                    }
                    return [4 /*yield*/, driver.analyze(model)];
                case 2:
                    r = _a.sent();
                    console.log(JSON.stringify(r, null, 2));
                    return [2 /*return*/];
            }
        });
    });
}
function version() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, _b;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _b = (_a = console).log;
                    return [4 /*yield*/, driver.version()];
                case 1:
                    _b.apply(_a, [_c.sent()]);
                    return [2 /*return*/];
            }
        });
    });
}
function resolveSolvers() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, _b;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _b = (_a = console).log;
                    return [4 /*yield*/, driver.resolveSolvers()];
                case 1:
                    _b.apply(_a, [_c.sent()]);
                    return [2 /*return*/];
            }
        });
    });
}
// tslint:disable-next-line: no-unused-expression
yargs_1.default(process.argv)
    .scriptName('minizinc-js')
    .usage('$0 <cmd> [args]')
    .command('solve [model] [data]', 'solve a given problem', function (yargs) {
    return yargs.positional('model', {
        type: 'string',
        describe: 'the mzn model file'
    }).positional('data', {
        type: 'string',
        describe: 'optional data (mzn or json) data file'
    }).option('raw', {
        type: 'boolean',
        describe: 'output the raw output not the parsed one'
    }).option('r', {
        type: 'number',
        alias: 'random-seed',
        describe: 'specify random seed'
    }).option('a', {
        type: 'boolean',
        alias: 'all-solutions',
        describe: 'output all solutions'
    }).option('f', {
        type: 'boolean',
        alias: 'free-search',
        describe: 'do a free search'
    }).option('solver', {
        type: 'string',
        alias: 's',
        describe: 'specify the solver to use'
    }).option('parallel', {
        type: 'number',
        alias: 'p',
        describe: 'run with n parallel threads'
    }).option('n', {
        type: 'number',
        alias: 'num-solutions',
        describe: 'stop after reporting N solutions'
    });
}, solve)
    .command('analyze [model]', 'analyze the given model', function (yargs) {
    return yargs.positional('model', {
        type: 'string',
        describe: 'the mzn model file'
    }).option('solver', {
        type: 'string',
        alias: 's',
        describe: 'specify the solver to use'
    });
}, analyze)
    .command('resolveSolvers', 'resolves the available solvers', function (yargs) {
    return yargs;
}, resolveSolvers)
    .command('version', 'shows version information', function (yargs) {
    return yargs;
}, version)
    .help()
    .argv;
//# sourceMappingURL=cli.js.map