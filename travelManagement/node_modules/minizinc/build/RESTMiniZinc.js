"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var interfaces_1 = require("./interfaces");
var ndjson_1 = require("./internal/ndjson");
var utils_1 = require("./internal/utils");
function handleError(r, isJSON) {
    if (isJSON === void 0) { isJSON = true; }
    if (r.ok) {
        return (isJSON ? r.json() : r.text()).catch(handleGenericError);
    }
    return r.text().then(function (t) {
        var result = t;
        if (isJSON) {
            try {
                result = JSON.parse(t);
            }
            catch (_a) {
                // dummy
            }
        }
        if (typeof result === 'string') {
            throw new interfaces_1.BackendException([{
                    type: 'unknown',
                    message: result
                }]);
        }
        throw new interfaces_1.BackendException(Array.isArray(result) ? result : [result]);
    });
}
function handleStream(onPartialResult) {
    return function (r) {
        if (!r.ok) {
            return handleError(r);
        }
        var result = {
            outputs: [],
            header: {},
            solutions: [],
            complete: false,
            status: interfaces_1.EStatus.UNKNOWN
        };
        var onChunk = function (chunk) {
            if (chunk.header) {
                Object.assign(result.header, chunk.header);
                onPartialResult('header', result);
            }
            else if (chunk.solution) {
                result.solutions.push(chunk.solution);
                onPartialResult('solution', result);
            }
            else if (chunk.result) {
                Object.assign(result, chunk.result, { solutions: result.solutions });
            }
        };
        return ndjson_1.parseNDJSON(r, onChunk, function () { return result; }).catch(handleGenericError);
    };
}
function handleTextStream(onChunk) {
    return function (r) {
        if (!r.ok) {
            return handleError(r);
        }
        var acc = '';
        var onChunkImpl = function (value) {
            acc += value;
            onChunk(value);
            return '';
        };
        return ndjson_1.streamBody(r, onChunkImpl, function () { return acc; }).catch(handleGenericError);
    };
}
function handleGenericError(error) {
    if (error instanceof interfaces_1.BackendException || Array.isArray(error.errors)) {
        throw error;
    }
    throw new interfaces_1.BackendException([{
            type: 'unknown',
            message: String(error)
        }]);
}
function fetchAbort(signal) {
    if (!signal) {
        return undefined;
    }
    var controller = new AbortController();
    signal.on('abort', function () { return controller.abort(); });
    return controller.signal;
}
var RESTMiniZinc = /** @class */ (function () {
    function RESTMiniZinc(options) {
        this.options = options;
    }
    Object.defineProperty(RESTMiniZinc.prototype, "baseUrl", {
        get: function () {
            return this.options.baseUrl || "/v1.0";
        },
        enumerable: true,
        configurable: true
    });
    RESTMiniZinc.prototype.buildOptions = function (options) {
        return utils_1.buildOptions(options, this.options);
    };
    RESTMiniZinc.prototype.analyze = function (code, options) {
        if (options === void 0) { options = {}; }
        return fetch(this.baseUrl + "/analyze", {
            method: 'POST',
            body: JSON.stringify(Object.assign({}, typeof code === 'string' ? { model: code } : code, {
                options: this.buildOptions(options)
            }), null, 2),
            headers: {
                'Content-Type': 'application/json'
            },
            signal: fetchAbort(options.signal)
        }).then(handleError).catch(handleGenericError);
    };
    RESTMiniZinc.prototype.solve = function (code, data, options) {
        if (options === void 0) { options = {}; }
        return fetch(this.baseUrl + "/solve" + (options.onPartialResult ? '/stream' : ''), {
            method: 'POST',
            body: JSON.stringify(Object.assign({}, typeof code === 'string' ? { model: code } : code, {
                data: data,
                options: this.buildOptions(options)
            }), null, 2),
            headers: {
                'Content-Type': 'application/json'
            },
            signal: fetchAbort(options.signal)
        }).then(options.onPartialResult ? handleStream(options.onPartialResult) : handleError).catch(handleGenericError);
    };
    RESTMiniZinc.prototype.solveRaw = function (code, data, options) {
        if (options === void 0) { options = {}; }
        return fetch(this.baseUrl + "/solve/raw", {
            method: 'POST',
            body: JSON.stringify(Object.assign({}, typeof code === 'string' ? { model: code } : code, {
                data: data,
                options: this.buildOptions(options)
            }), null, 2),
            headers: {
                'Content-Type': 'application/json'
            },
            signal: fetchAbort(options.signal),
        }).then(options.onChunk ? handleTextStream(options.onChunk) : function (r) { return handleError(r, false); }).catch(handleGenericError);
    };
    RESTMiniZinc.prototype.resolveSolvers = function () {
        return fetch(this.baseUrl + "/resolveSolvers", {
            method: 'GET'
        }).then(handleError).catch(handleGenericError);
    };
    RESTMiniZinc.prototype.version = function () {
        return fetch(this.baseUrl + "/version", {
            method: 'GET'
        }).then(function (r) { return handleError(r, false); }).catch(handleGenericError);
    };
    RESTMiniZinc.prototype.terminate = function () {
        return fetch(this.baseUrl + "/terminate", {
            method: 'POST'
        }).then(function (r) { return handleError(r, false); }).catch(handleGenericError);
    };
    return RESTMiniZinc;
}());
exports.default = RESTMiniZinc;
//# sourceMappingURL=RESTMiniZinc.js.map