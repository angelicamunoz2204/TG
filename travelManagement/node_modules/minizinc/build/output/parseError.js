"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../internal/utils");
function parseError(str, modelFile, dataFile) {
    str = utils_1.normalize(str);
    modelFile = utils_1.normalize(modelFile);
    if (dataFile) {
        dataFile = utils_1.normalize(dataFile);
    }
    console.log(str, modelFile, dataFile);
    var errors = [];
    var modelErrors = str.split(modelFile);
    var areEvaluationErrors = false;
    for (var _i = 0, modelErrors_1 = modelErrors; _i < modelErrors_1.length; _i++) {
        var modelError = modelErrors_1[_i];
        modelError = modelError.trim();
        if (!modelError) {
            continue;
        }
        if (modelError === 'MiniZinc: evaluation error:') {
            areEvaluationErrors = true;
            continue;
        }
        var lineNumbers = /^:(\d+)(\.(\d+)(-(\d+))?)?/gm.exec(modelError);
        var error = {
            message: modelError,
            type: 'MiniZincModelError'
        };
        if (lineNumbers) {
            var col = lineNumbers.length > 1 ? parseInt(lineNumbers[3], 10) : 0;
            var endCol = lineNumbers[5] != null ? parseInt(lineNumbers[5], 10) : col;
            error.location = {
                line: parseInt(lineNumbers[1], 10),
                columns: [col, endCol]
            };
            var messageStart = modelError.indexOf(':', 2); // since it start with :
            if (messageStart > 0) {
                error.message = modelError = modelError.slice(messageStart + 1); // rest
            }
        }
        if (areEvaluationErrors) {
            error.type = 'MiniZincEvaluationError';
            errors.push(error);
            continue;
        }
        var syntaxKey = 'Error: syntax error, ';
        var start = modelError.indexOf(syntaxKey);
        if (start >= 0) {
            error.type = 'MiniZincSyntaxError';
            var end = modelError.indexOf('\n', start);
            error.message = modelError.slice(start + syntaxKey.length, end >= 0 ? end : undefined);
        }
        errors.push(error);
    }
    if (errors.length === 0) {
        errors.push({
            message: str,
            type: 'Generic'
        });
    }
    return errors;
}
exports.default = parseError;
//# sourceMappingURL=parseError.js.map