import { IMiniZinc } from '.';
export interface IReplyer {
    reply(channel: string, arg?: any): void;
}
interface IChannelReceiveLike {
    once(channel: string, listener: (evt: IReplyer, arg: any) => void): void;
    on(channel: string, listener: (evt: IReplyer, arg: any) => void): void;
    removeListener(channel: string, listener: (evt: IReplyer, arg: any) => void): void;
}
export interface IMessagingReceiverOptions {
    channel: IChannelReceiveLike;
    window?: Window;
}
export declare function createWindowReceiverChannel(win?: Window): IChannelReceiveLike;
export default class MessagingReceiver {
    private readonly minizinc;
    private readonly channel;
    constructor(minizinc: IMiniZinc, channel: IChannelReceiveLike);
    private abortListener;
    private onAnalyze;
    private onSolve;
    private onSolveRaw;
    private onResolveSolvers;
    private onVersion;
    private onTerminate;
    register(): void;
    deregister(): void;
}
export {};
//# sourceMappingURL=MessagingReceiver.d.ts.map