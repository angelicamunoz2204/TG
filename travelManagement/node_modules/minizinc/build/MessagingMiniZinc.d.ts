import { IMiniZinc, IMiniZincOptions, IModelMetaData, IModelParams, IDataObject, IMiniZincSolveOptions, IResult, IMiniZincSolveRawOptions, ISolverConfiguration, IMiniZincConstructorOptions } from '.';
export interface IChannelLike {
    send(channel: string, msg?: any): void;
    once(channel: string, listener: (evt: any, arg: any) => void): void;
    on(channel: string, listener: (evt: any, arg: any) => void): void;
    removeListener(channel: string, listener: (evt: any, arg: any) => void): void;
}
export interface IMessagingMiniZincOptions extends IMiniZincConstructorOptions {
    channel: IChannelLike;
    window?: Window;
}
export declare function createWindowChannel(receiver: Window, sender?: Window): IChannelLike;
export default class MessagingMiniZinc implements IMiniZinc {
    private readonly channel;
    private readonly options;
    private id;
    constructor(channel: IChannelLike, options?: Partial<IMiniZincConstructorOptions>);
    analyze(code: string | IModelParams, options?: Partial<IMiniZincOptions>): Promise<IModelMetaData>;
    solve(code: string | IModelParams, data?: IDataObject, options?: Partial<IMiniZincSolveOptions>): Promise<IResult>;
    solveRaw(code: string | IModelParams, data?: IDataObject, options?: Partial<IMiniZincSolveRawOptions>): Promise<string>;
    resolveSolvers(): Promise<ISolverConfiguration[]>;
    version(): Promise<string>;
    terminate(): Promise<boolean>;
}
//# sourceMappingURL=MessagingMiniZinc.d.ts.map