import { IDataObject, IMiniZincOptions, IMiniZinc, IMiniZincSolveOptions, IModelParams, IResult, IMiniZincConstructorOptions, IMiniZincSolveRawOptions } from './interfaces';
export { isCLIAvailable } from './internal/cli';
export declare type ICLIMiniZincOptions = IMiniZincConstructorOptions;
export default class CLIMiniZinc implements IMiniZinc {
    private readonly options;
    constructor(options?: Partial<ICLIMiniZincOptions>);
    solve(paramsOrCode: IModelParams | string, data?: IDataObject | string, options?: Partial<IMiniZincSolveOptions>): Promise<IResult>;
    solveRaw(paramsOrCode: string | IModelParams, data?: IDataObject | string, options?: Partial<IMiniZincSolveRawOptions>): Promise<string>;
    private analyzeImpl;
    analyze(paramsOrCode: string | IModelParams, options?: Partial<IMiniZincOptions>): Promise<import("./interfaces").IModelMetaData>;
    resolveSolvers(): Promise<import("./interfaces").ISolverConfiguration[]>;
    version(): Promise<string>;
    terminate(): Promise<boolean>;
}
//# sourceMappingURL=CLIMiniZinc.d.ts.map