[
  {
    "extraInfo": {
      "mznlib": "/opt/minizinc-ide/share/minizinc/chuffed",
      "executable": "/opt/minizinc-ide/bin/fzn-chuffed",
      "configFile": "/opt/minizinc-ide/share/minizinc/solvers/chuffed.msc"
    },
    "id": "org.chuffed.chuffed",
    "name": "Chuffed",
    "version": "0.12.0",
    "mznlib": "../chuffed",
    "executable": "../../../bin/fzn-chuffed",
    "mznlibVersion": 1,
    "description": "Chuffed FlatZinc executable",
    "stdFlags": ["-a","-f","-n","-r","-s","-t","-v","--cp-profiler"],
    "extraFlags": [
      ["--prop-fifo","Use FIFO queues for propagation","bool","false"],
      ["--vsids","Use activity-based search on the Boolean variables","bool","false"],
      ["--toggle-vsids","Alternate search between user-specified and activity-based one","bool","false"],
      ["--restart","Restart sequence type","opt:chuffed:none:constant:linear:luby:geometric","chuffed"],
      ["--restart-base","Base for geometric restart sequence","float","1.5"],
      ["--restart-scale","Scale factor for restart sequence","int","1000000000"],
      ["--switch-to-vsids-after","Search starts with the user-specified one and switches to the activity-based one after a specified number of conflicts","int","1000000000"],
      ["--branch-random","Use random variable selection for tie breaking instead of input order","bool","false"],
      ["--sat-polarity","Selection of the polarity of Boolean variables (0 = default, 1 = same, 2 = anti, 3 = random)","int","0"],
      ["--lazy","Allow clause generation for domain update","bool:on:off","true"],
      ["--finesse","Try to generated stronger clauses","bool:on:off","true"],
      ["--learn","Compute nogoods when a conflict is encountered","bool:on:off","true"],
      ["--eager-limit","The maximal domain size of eager integer variables","int","1000"],
      ["--sat-var-limit","The maximal number of Boolean variables","int","2000000"],
      ["--n-of-learnts","The maximal number of learnt clauses","int","100000"],
      ["--learnts-mlimit","The maximal memory limit for learnt clauses in Bytes","int","500000000"],
      ["--sort-learnt-level","Sort literals in a learnt clause based on their decision level","bool","false"],
      ["--one-watch","Watch only one literal in a learn clause","bool:on:off","true"],
      ["--bin-clause-opt","Optimise learnt clauses of length 2","bool:on:off","true"],
      ["--assump-int","Try and convert assumptions from the assumption interface back to integer domain expressions","bool:on:off","false"],
      ["--introduced-heuristic","Decide if variable is introduced based on its name","bool","false"],
      ["--use-var-is-introduced","Decide if variable is introduced based on var_is_introduced annotation","bool","false"],
      ["--exclude-introduced","Exclude introduced variables from learnt clauses","bool","false"],
      ["--decide-introduced","Allow search decisions on introduced variables and their derived internal variables","bool:on:off","true"],
      ["--fd-simplify","Remove FD propagators that are satisfied globally","bool:on:off","true"],
      ["--sat-simplify","Remove of clauses that are satisfied globally","bool:on:off","true"],
      ["--cumu-global","Use the global cumulative propagator if possible","bool:on:off","true"],
      ["--disj-edge-find","Use the edge-finding propagator for disjunctive constraints","bool:on:off","true"],
      ["--disj-set-bp","Use the set bounds propagator for disjunctive constraints","bool:on:off","true"],
      ["--mdd","Use the MDD propagator if possible","bool","false"],
      ["--mip","Use the MIP propagator if possible","bool","false"],
      ["--mip-branch","Use MIP branching as the branching strategy","bool","false"],
      ["--sym-static","Use static symmetry breaking constraints","bool","false"],
      ["--ldsb","Use lightweight dynamic symmetry breaking constraints '1UIP crippled'","bool","false"],
      ["--ldsbta","Use lightweight dynamic symmetry breaking constraints '1UIP'","bool","false"],
      ["--ldsbad","Use lightweight dynamic symmetry breaking constraints 'all decision clause'","bool","false"],
      ["--sbps","Use Solution-based phase saving (SBPS) value selection heuristic","bool","false"]
    ],
    "tags": ["cp","lcg","int"],
    "supportsMzn": false,
    "supportsFzn": true,
    "supportsNL": false,
    "needsSolns2Out": true,
    "needsMznExecutable": false,
    "needsStdlibDir": false,
    "needsPathsFile": false,
    "isGUIApplication": false
  },
  {
    "extraInfo": {
      "configFile": ""
    },
    "id": "org.minizinc.mip.coin-bc",
    "name": "COIN-BC",
    "version": "2.10.10/1.17.8",
    "mznlib": "-Glinear",
    "mznlibVersion": 1,
    "description": "MIP wrapper for COIN-BC 2.10.10,  using CLP 1.17.8  Compiled  Jun  7 2023  02:45:57",
    "stdFlags": ["-i","-p","-s","-v"],
    "extraFlags": [
      ["--cbc-allowableGap","Stop when gap between best possible and best less than this","float:0.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","0.000000"],
      ["--cbc-artificialCost","Costs >= this treated as artificials in feasibility pump","float:0.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","0.000000"],
      ["--cbc-autoScale","Whether to scale objective, rhs and bounds of problem if they look odd","bool:off:on","off"],
      ["--cbc-biasLU","Whether factorization biased towards U","opt:UU:UX:LX:LL","LX"],
      ["--cbc-bscale","Whether to scale in barrier (and ordering speed)","opt:off:on:off1:on1:off2:on2","off"],
      ["--cbc-cholesky","Which cholesky algorithm","opt:native:dense:fudgeLong_dummy:wssmp_dummy:UniversityOfFlorida_dummy:Taucs_dummy:Mumps_dummy:Pardiso_dummy","native"],
      ["--cbc-cliqueCuts","Whether to use Clique cuts","opt:off:on:root:ifmove:forceOn:onglobal","ifmove"],
      ["--cbc-combineSolutions","Whether to use combine solution heuristic","opt:off:on:both:before:onquick:bothquick:beforequick","off"],
      ["--cbc-combine2Solutions","Whether to use crossover solution heuristic","opt:off:on:both:before","off"],
      ["--cbc-constraintfromCutoff","Whether to use cutoff as constraint","opt:off:on:variable:forcevariable:conflict","off"],
      ["--cbc-costStrategy","How to use costs for branching priorities","opt:off:priorities:columnOrder:01first:01last:length:singletons:nonzero:generalForce","off"],
      ["--cbc-cplexUse","Whether to use Cplex!","bool:off:on","off"],
      ["--cbc-cppGenerate","Generates C++ code","int:-1:50000","-1"],
      ["--cbc-crash","Whether to create basis for problem","opt:off:on:solow_halim:lots:idiot1:idiot2:idiot3:idiot4:idiot5:idiot6:idiot7","off"],
      ["--cbc-crossover","Whether to get a basic solution with the simplex algorithm after the barrier algorithm finished","opt:on:off:maybe:presolve","on"],
      ["--cbc-cutDepth","Depth in tree at which to do cuts","int:-1:2147483647","-1"],
      ["--cbc-cutLength","Length of a cut","int:-1:2147483647","-1"],
      ["--cbc-cutoff","Bound on the objective value for all solutions","float:-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","10000000000000000159028911097599180468360808563945281389781327557747838772170381060813469985856815104.000000"],
      ["--cbc-cutsOnOff","Switches all cut generators on or off","opt:off:on:root:ifmove:forceOn","on"],
      ["--cbc-decompose","Whether to try decomposition","int:-2147483647:2147483647","0"],
      ["--cbc-denseThreshold","Threshold for using dense factorization","int:-1:10000","-1"],
      ["--cbc-depthMiniBab","Depth at which to try mini branch-and-bound","int:-2147483647:2147483647","-1"],
      ["--cbc-dextra3","Extra double parameter 3","float:-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","0.000000"],
      ["--cbc-dextra4","Extra double parameter 4","float:-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","0.000000"],
      ["--cbc-dextra4","Extra double parameter 5","float:-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","0.000000"],
      ["--cbc-Dins","Whether to try Distance Induced Neighborhood Search","opt:off:on:both:before:often","off"],
      ["--cbc-direction","Minimize or Maximize","opt:minimize:maximize:zero","minimize"],
      ["--cbc-diveOpt","Diving options","int:-1:200000","-1"],
      ["--cbc-diveSolves","Diving solve option","int:-1:200000","100"],
      ["--cbc-DivingSome","Whether to try Diving heuristics","opt:off:on:both:before","off"],
      ["--cbc-DivingCoefficient","Whether to try Coefficient diving heuristic","opt:off:on:both:before","off"],
      ["--cbc-DivingFractional","Whether to try Fractional diving heuristic","opt:off:on:both:before","off"],
      ["--cbc-DivingGuided","Whether to try Guided diving heuristic","opt:off:on:both:before","off"],
      ["--cbc-DivingLineSearch","Whether to try Linesearch diving heuristic","opt:off:on:both:before","off"],
      ["--cbc-DivingPseudoCost","Whether to try Pseudocost diving heuristic","opt:off:on:both:before","off"],
      ["--cbc-DivingVectorLength","Whether to try Vectorlength diving heuristic","opt:off:on:both:before","off"],
      ["--cbc-dualBound","Initially algorithm acts as if no gap between bounds exceeds this value","float:0.000000:1000000000000.000000","10000000000.000000"],
      ["--cbc-dualize","Solves dual reformulation","int:0:4","3"],
      ["--cbc-dualPivot","Dual pivot choice algorithm","opt:automatic:dantzig:partial:steepest:PEsteepest:PEdantzig","automatic"],
      ["--cbc-dualTolerance","For an optimal solution no dual infeasibility may exceed this value","float:0.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","0.000000"],
      ["--cbc-dwHeuristic","Whether to try Dantzig Wolfe heuristic","opt:off:on:both:before","off"],
      ["--cbc-errorsAllowed","Whether to allow import errors","bool:off:on","off"],
      ["--cbc-experiment","Whether to use testing features","int:-1:200000","0"],
      ["--cbc-expensiveStrong","Whether to do even more strong branching","int:0:2147483647","0"],
      ["--cbc-extra1","Extra integer parameter 1","int:-2147483647:2147483647","-1"],
      ["--cbc-extra2","Extra integer parameter 2","int:-2147483647:2147483647","-1"],
      ["--cbc-extra3","Extra integer parameter 3","int:-2147483647:2147483647","-1"],
      ["--cbc-extra4","Extra integer parameter 4","int:-1:2147483647","-1"],
      ["--cbc-extraVariables","Allow creation of extra integer variables","int:-2147483647:2147483647","0"],
      ["--cbc-factorization","Which factorization to use","opt:normal:dense:simple:osl","normal"],
      ["--cbc-feasibilityPump","Whether to try the Feasibility Pump heuristic","opt:off:on:both:before","on"],
      ["--cbc-fixOnDj","Try heuristic based on fixing variables with reduced costs greater than this","float:-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","-1.000000"],
      ["--cbc-flowCoverCuts","Whether to use Flow Cover cuts","opt:off:on:root:ifmove:forceOn:onglobal","ifmove"],
      ["--cbc-forceSolution","Whether to use given solution as crash for BAB","int:-1:20000000","-1"],
      ["--cbc-fractionforBAB","Fraction in feasibility pump","float:0.000010:1.100000","0.500000"],
      ["--cbc-gammaDelta","Whether to regularize barrier","opt:off:on:gamma:delta:onstrong:gammastrong:deltastrong","off"],
      ["--cbc-GMICuts","Whether to use alternative Gomory cuts","opt:off:on:root:ifmove:forceOn:endonly:long:longroot:longifmove:forceLongOn:longendonly","off"],
      ["--cbc-gomoryCuts","Whether to use Gomory cuts","opt:off:on:root:ifmove:forceOn:onglobal:forceandglobal:forceLongOn:long","ifmove"],
      ["--cbc-greedyHeuristic","Whether to use a greedy heuristic","opt:off:on:both:before","on"],
      ["--cbc-heuristicsOnOff","Switches most primal heuristics on or off","bool:off:on","on"],
      ["--cbc-hOptions","Heuristic options","int:-2147483647:2147483647","0"],
      ["--cbc-hotStartMaxIts","Maximum iterations on hot start","int:0:2147483647","100"],
      ["--cbc-idiotCrash","Whether to try idiot crash","int:-1:2147483647","-1"],
      ["--cbc-increment","A valid solution must be at least this much better than last integer solution","float:-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","0.000010"],
      ["--cbc-infeasibilityWeight","Each integer infeasibility is expected to cost this much","float:0.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","0.000000"],
      ["--cbc-integerTolerance","For a feasible solution no integer variable may be more than this away from an integer value","float:0.000000:0.500000","0.000000"],
      ["--cbc-keepNames","Whether to keep names from import","bool:on:off","on"],
      ["--cbc-KKT","Whether to use KKT factorization in barrier","bool:off:on","off"],
      ["--cbc-knapsackCuts","Whether to use Knapsack cuts","opt:off:on:root:ifmove:forceOn:onglobal:forceandglobal","ifmove"],
      ["--cbc-lagomoryCuts","Whether to use Lagrangean Gomory cuts","opt:off:endonlyroot:endcleanroot:root:endonly:endclean:endboth:onlyaswell:cleanaswell:bothaswell:onlyinstead:cleaninstead:bothinstead:onlyaswellroot:cleanaswellroot:bothaswellroot","off"],
      ["--cbc-latwomirCuts","Whether to use Lagrangean TwoMir cuts","opt:off:endonlyroot:endcleanroot:endbothroot:endonly:endclean:endboth:onlyaswell:cleanaswell:bothaswell:onlyinstead:cleaninstead:bothinstead","off"],
      ["--cbc-liftAndProjectCuts","Whether to use Lift and Project cuts","opt:off:on:root:ifmove:forceOn","off"],
      ["--cbc-localTreeSearch","Whether to use local tree search when a solution is found","bool:off:on","off"],
      ["--cbc-logLevel","Level of detail in Coin branch and Cut output","int:-63:63","1"],
      ["--cbc-maxFactor","Maximum number of iterations between refactorizations","int:1:2147483647","200"],
      ["--cbc-maxIterations","Maximum number of iterations before stopping","int:0:2147483647","2147483647"],
      ["--cbc-maxNodes","Maximum number of nodes to do","int:-1:2147483647","2147483647"],
      ["--cbc-maxSavedSolutions","Maximum number of solutions to save","int:0:2147483647","0"],
      ["--cbc-maxSolutions","Maximum number of feasible solutions to get","int:1:2147483647","2147483647"],
      ["--cbc-mixedIntegerRoundingCuts","Whether to use Mixed Integer Rounding cuts","opt:off:on:root:ifmove:forceOn:onglobal","ifmove"],
      ["--cbc-messages","Controls if Clpnnnn is printed","bool:off:on","off"],
      ["--cbc-multipleRootPasses","Do multiple root passes to collect cuts and solutions","int:0:2147483647","0"],
      ["--cbc-naiveHeuristics","Whether to try some stupid heuristic","opt:off:on:both:before","off"],
      ["--cbc-nodeStrategy","What strategy to use to select the next node from the branch and cut tree","opt:hybrid:fewest:depth:upfewest:downfewest:updepth:downdepth","fewest"],
      ["--cbc-numberAnalyze","Number of analysis iterations","int:-2147483647:2147483647","0"],
      ["--cbc-objectiveScale","Scale factor to apply to objective","float:-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","1.000000"],
      ["--cbc-PrepNames","If column names will be kept in pre-processed model","bool:off:on","off"],
      ["--cbc-outputFormat","Which output format to use","int:1:6","2"],
      ["--cbc-passCuts","Number of rounds that cut generators are applied in the root node","int:-2147483647:2147483647","20"],
      ["--cbc-passFeasibilityPump","How many passes to do in the Feasibility Pump heuristic","int:0:10000","20"],
      ["--cbc-passPresolve","How many passes in presolve","int:-200:100","5"],
      ["--cbc-passTreeCuts","Number of rounds that cut generators are applied in the tree","int:-2147483647:2147483647","10"],
      ["--cbc-pertValue","Method of perturbation","int:-5000:102","50"],
      ["--cbc-perturbation","Whether to perturb the problem","bool:on:off","on"],
      ["--cbc-PFI","Whether to use Product Form of Inverse in simplex","bool:off:on","off"],
      ["--cbc-pivotAndComplement","Whether to try Pivot and Complement heuristic","opt:off:on:both:before","off"],
      ["--cbc-pivotAndFix","Whether to try Pivot and Fix heuristic","opt:off:on:both:before","off"],
      ["--cbc-pOptions","Dubious print options","int:0:2147483647","0"],
      ["--cbc-preOpt","Presolve options","int:0:2147483647","-1"],
      ["--cbc-presolve","Whether to presolve problem","opt:on:off:more:file","on"],
      ["--cbc-preprocess","Whether to use integer preprocessing","opt:off:on:save:equal:sos:trysos:equalall:strategy:aggregate:forcesos:stopaftersaving","sos"],
      ["--cbc-preTolerance","Tolerance to use in presolve","float:0.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","0.000000"],
      ["--cbc-primalPivot","Primal pivot choice algorithm","opt:automatic:exact:dantzig:partial:steepest:change:sprint:PEsteepest:PEdantzig","automatic"],
      ["--cbc-primalTolerance","For a feasible solution no primal infeasibility, i.e., constraint violation, may exceed this value","float:0.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","0.000000"],
      ["--cbc-primalWeight","Initially algorithm acts as if it costs this much to be infeasible","float:0.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","10000000000.000000"],
      ["--cbc-psi","Two-dimension pricing factor for Positive Edge criterion","float:-1.100000:1.100000","-0.500000"],
      ["--cbc-printingOptions","Print options","opt:normal:integer:special:rows:all:csv:boundranging:rhsranging:objectiveranging:stats:boundsint:boundsall:fixint:fixall","normal"],
      ["--cbc-probingCuts","Whether to use Probing cuts","opt:off:on:root:ifmove:forceOn:onglobal:forceonglobal:forceOnBut:forceOnStrong:forceOnButStrong:strongRoot","ifmove"],
      ["--cbc-proximitySearch","Whether to do proximity search heuristic","opt:off:on:both:before:10:100:300","off"],
      ["--cbc-pumpCutoff","Fake cutoff for use in feasibility pump","float:-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","0.000000"],
      ["--cbc-pumpIncrement","Fake increment for use in feasibility pump","float:-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","0.000000"],
      ["--cbc-pumpTune","Dubious ideas for feasibility pump","int:0:100000000","1003"],
      ["--cbc-randomCbcSeed","Random seed for Cbc","int:-1:2147483647","-1"],
      ["--cbc-randomizedRounding","Whether to try randomized rounding heuristic","opt:off:on:both:before","off"],
      ["--cbc-randomSeed","Random seed for Clp","int:0:2147483647","1234567"],
      ["--cbc-ratioGap","Stop when gap between best possible and best known is less than this fraction of larger of two","float:0.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","0.000000"],
      ["--cbc-reallyObjectiveScale","Scale factor to apply to objective in place","float:-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","1.000000"],
      ["--cbc-reduceAndSplitCuts","Whether to use Reduce-and-Split cuts","opt:off:on:root:ifmove:forceOn","off"],
      ["--cbc-reduce2AndSplitCuts","Whether to use Reduce-and-Split cuts - style 2","opt:off:on:root:longOn:longRoot","off"],
      ["--cbc-residualCapacityCuts","Whether to use Residual Capacity cuts","opt:off:on:root:ifmove:forceOn","off"],
      ["--cbc-rhsScale","Scale factor to apply to rhs and bounds","float:-179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","1.000000"],
      ["--cbc-Rens","Whether to try Relaxation Enforced Neighborhood Search","opt:off:on:both:before:200:1000:10000:dj:djbefore:usesolution","off"],
      ["--cbc-Rins","Whether to try Relaxed Induced Neighborhood Search","opt:off:on:both:before:often","off"],
      ["--cbc-roundingHeuristic","Whether to use simple (but effective) Rounding heuristic","opt:off:on:both:before","on"],
      ["--cbc-scaling","Whether to scale problem","opt:off:equilibrium:geometric:automatic:dynamic:rowsonly","automatic"],
      ["--cbc-seconds","maximum seconds","float:-1.000000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","10000000000000000159028911097599180468360808563945281389781327557747838772170381060813469985856815104.000000"],
      ["--cbc-slowcutpasses","Maximum number of rounds for slower cut generators","int:-1:2147483647","10"],
      ["--cbc-slpValue","Number of slp passes before primal","int:-50000:50000","-1"],
      ["--cbc-smallFactorization","Threshold for using small factorization","int:-1:10000","-1"],
      ["--cbc-sosOptions","Whether to use SOS from AMPL","bool:off:on","on"],
      ["--cbc-slogLevel","Level of detail in (LP) Solver output","int:-1:63","1"],
      ["--cbc-sosPrioritize","How to deal with SOS priorities","opt:off:high:low:orderhigh:orderlow","off"],
      ["--cbc-sparseFactor","Whether factorization treated as sparse","bool:on:off","on"],
      ["--cbc-specialOptions","Dubious options for Simplex - see ClpSimplex.hpp","int:0:2147483647","-1"],
      ["--cbc-sprintCrash","Whether to try sprint crash","int:-1:2147483647","-1"],
      ["--cbc-strategy","Switches on groups of features","int:0:2","1"],
      ["--cbc-strongBranching","Number of variables to look at in strong branching","int:0:2147483647","5"],
      ["--cbc-substitution","How long a column to substitute for in presolve","int:0:10000","3"],
      ["--cbc-testOsi","Test OsiObject stuff","int:-1:2147483647","-1"],
      ["--cbc-threads","Number of threads to try and use","int:-100:100000","0"],
      ["--cbc-tightenFactor","Tighten bounds using this times largest activity at continuous solution","float:0.001000:179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000","-1.000000"],
      ["--cbc-timeMode","Whether to use CPU or elapsed time","opt:cpu:elapsed","cpu"],
      ["--cbc-trustPseudoCosts","Number of branches before we trust pseudocosts","int:-3:2147483647","10"],
      ["--cbc-tunePreProcess","Dubious tuning parameters for preprocessing","int:0:2147483647","-1"],
      ["--cbc-twoMirCuts","Whether to use Two phase Mixed Integer Rounding cuts","opt:off:on:root:ifmove:forceOn:onglobal:forceandglobal:forceLongOn","root"],
      ["--cbc-VndVariableNeighborhoodSearch","Whether to try Variable Neighborhood Search","opt:off:on:both:before:intree","off"],
      ["--cbc-vector","Whether to use vector? Form of matrix in simplex","bool:off:on","off"],
      ["--cbc-verbose","Switches on longer help on single ?","int:0:31","0"],
      ["--cbc-vubheuristic","Type of VUB heuristic","int:-2:20","-1"],
      ["--cbc-zeroHalfCuts","Whether to use zero half cuts","opt:off:on:root:ifmove:forceOn:onglobal","ifmove"],
      ["--cbc-zeroTolerance","Kill all coefficients whose absolute value is less than this value","float:0.000000:0.000010","0.000000"]
    ],
    "tags": ["mip","float","api","osicbc","coinbc","cbc"],
    "supportsMzn": true,
    "supportsFzn": true,
    "supportsNL": false,
    "needsSolns2Out": true,
    "needsMznExecutable": false,
    "needsStdlibDir": false,
    "needsPathsFile": false,
    "isGUIApplication": false
  },
  {
    "extraInfo": {
      "configFile": ""
    },
    "id": "org.minizinc.mip.cplex",
    "name": "CPLEX",
    "version": "<unknown version>",
    "mznlib": "-Glinear",
    "mznlibVersion": 1,
    "description": "MIP wrapper for IBM ILOG CPLEX  [?? ...cannot open CPLEX env to query version]  Compiled  Jun  7 2023  02:45:55",
    "requiredFlags": ["--cplex-dll"],
    "stdFlags": ["-i","-p","-s","-v"],
    "tags": ["mip","float","api"],
    "supportsMzn": true,
    "supportsFzn": true,
    "supportsNL": false,
    "needsSolns2Out": true,
    "needsMznExecutable": false,
    "needsStdlibDir": false,
    "needsPathsFile": false,
    "isGUIApplication": false
  },
  {
    "extraInfo": {
      "executable": "/opt/minizinc-ide/bin/findMUS",
      "configFile": "/opt/minizinc-ide/share/minizinc/solvers/findmus.msc"
    },
    "id": "org.minizinc.findmus",
    "name": "findMUS",
    "version": "0.7.0",
    "executable": "../../../bin/findMUS",
    "mznlibVersion": 1,
    "stdFlags": ["--output-html","-v","-s","-a","-n","-t","--json-stream"],
    "extraFlags": [
      ["-a","Find all MUSes","bool","true"],
      ["-n","Number of MUSes to find","int","1"],
      ["--paramset","Preset parameters","opt:hint:mzn:fzn","mzn"],
      ["--subsolver","Sub-solver for SAT checking","string","gecode_presolver"],
      ["--subsolver-timelimit","Timelimit for SAT check (ms)","int","1000"],
      ["--adapt-timelimit","Automatically set timelimit to 1.5x initial SAT check time","bool","true"],
      ["--structure","Alter initial structure","opt:flat:gen:normal:mix:idx:idxmix","gen"],
      ["--no-binarize","Disable binarization","bool","true"],
      ["--shrink-alg","MUS shrink algorithm","opt:lin:map_lin:qx:qx2:map_qx","map_qx"],
      ["--depth","Abstraction level of MUSes","opt:mzn:fzn:1:5:25:100","mzn"],
      ["--restart","Restart to leaves behaviour","bool","true"],
      ["--output-brief","Do not output traces.","bool","true"],
      ["--output-json","Print MUSes in JSON format","bool","true"],
      ["--output-human","Print MUSes in a more human readable format","bool","true"],
      ["--verbose-compile","Verbose compilation","bool","true"],
      ["--verbose","Verbose output","bool","true"],
      ["--frequent-stats","Print statistics after each MUS","bool","true"],
      ["--no-leftover","Don't print partially reduced set on timeout","bool","true"],
      ["--verbose-subsolve","Verbosity level for subsolving","int:0:1:2","0"],
      ["--verbose-enum","Verbosity level for enumeration","int:0:1:2","0"],
      ["--verbose-map","Verbosity level for map calls","int:0:1:2","0"],
      ["--stdlib-dir","Location of MiniZinc stdlib directory.","string",""],
      ["--no-progress","Disable mzn-progress output for IDE","bool","true"],
      ["--no-stats","Disable statistics output","bool","true"],
      ["--filter-mode","Change filtering mode (foreground, exclusive)","opt:fg:ex","fg"],
      ["--filter-path","Filter constraints by path (comma separated)","string",""],
      ["--filter-named","Filter constraints by name (comma separated)","string",""],
      ["--dump-dot","Write tree to GraphViz file","string",""],
      ["-g","Attempt to record domain changes as constraints","bool","true"],
      ["--soft-defines","Consider functional constraints as part of MUSes.","bool","true"],
      ["--named-only","Treat constraints with name annotations as foreground","bool","true"],
      ["--help","Extra help information","bool","true"]
    ],
    "supportsMzn": true,
    "supportsFzn": true,
    "supportsNL": false,
    "needsSolns2Out": false,
    "needsMznExecutable": false,
    "needsStdlibDir": true,
    "needsPathsFile": false,
    "isGUIApplication": false
  },
  {
    "extraInfo": {
      "isDefault": true,
      "mznlib": "/opt/minizinc-ide/share/minizinc/gecode",
      "executable": "/opt/minizinc-ide/bin/fzn-gecode",
      "configFile": "/opt/minizinc-ide/share/minizinc/solvers/gecode.msc"
    },
    "id": "org.gecode.gecode",
    "name": "Gecode",
    "version": "6.3.0",
    "mznlib": "../gecode",
    "executable": "../../../bin/fzn-gecode",
    "mznlibVersion": 1,
    "description": "Gecode FlatZinc executable",
    "stdFlags": ["-a","-f","-n","-p","-r","-s","-t","--cp-profiler"],
    "extraFlags": [
      ["--c-d","Recomputation commit distance","int","8"],
      ["--a-d","Recomputation adaption distance","int","2"],
      ["--decay","Decay factor","float","0.99"],
      ["--node","Node cutoff","int","0"],
      ["--fail","Failure cutoff","int","0"],
      ["--restart","Restart sequence type","opt:none:constant:linear:luby:geometric","none"],
      ["--restart-base","Base for geometric restart sequence","float","1.5"],
      ["--restart-scale","Scale factor for restart sequence","int","250"],
      ["--restart-limit","Restart cutoff","int","0"],
      ["--nogoods","Use no-goods from restarts","bool","false"],
      ["--nogoods-limit","Depth limit for no-good extraction","int","128"]
    ],
    "tags": ["cp","int","float","set","restart"],
    "supportsMzn": false,
    "supportsFzn": true,
    "supportsNL": false,
    "needsSolns2Out": true,
    "needsMznExecutable": false,
    "needsStdlibDir": false,
    "needsPathsFile": false,
    "isGUIApplication": false
  },
  {
    "extraInfo": {
      "mznlib": "/opt/minizinc-ide/share/minizinc/gecode",
      "executable": "/opt/minizinc-ide/bin/fzn-gecode",
      "configFile": "/opt/minizinc-ide/share/minizinc/solvers/gecode-gist.msc"
    },
    "id": "org.gecode.gist",
    "name": "Gecode Gist",
    "version": "6.3.0",
    "mznlib": "../gecode",
    "executable": "../../../bin/fzn-gecode",
    "mznlibVersion": 1,
    "description": "Gecode FlatZinc executable",
    "stdFlags": ["-a","-f","-n","-p","-r","-s","-t","--cp-profiler"],
    "extraFlags": [
      ["--c-d","Recomputation commit distance","int","8"],
      ["--a-d","Recomputation adaption distance","int","2"],
      ["--decay","Decay factor","float","0.99"],
      ["--node","Node cutoff","int","0"],
      ["--fail","Failure cutoff","int","0"],
      ["--restart","Restart sequence type","opt:none:constant:linear:luby:geometric","none"],
      ["--restart-base","Base for geometric restart sequence","float","1.5"],
      ["--restart-scale","Scale factor for restart sequence","int","250"],
      ["--restart-limit","Restart cutoff","int","0"],
      ["--nogoods","Use no-goods from restarts","bool","false"],
      ["--nogoods-limit","Depth limit for no-good extraction","int","128"]
    ],
    "tags": ["cp","int","float","set","restart"],
    "supportsMzn": false,
    "supportsFzn": true,
    "supportsNL": false,
    "needsSolns2Out": true,
    "needsMznExecutable": false,
    "needsStdlibDir": false,
    "needsPathsFile": false,
    "isGUIApplication": true
  },
  {
    "extraInfo": {
      "mznlib": "/opt/minizinc-ide/share/minizinc/globalizer",
      "executable": "/opt/minizinc-ide/bin/minizinc-globalizer",
      "configFile": "/opt/minizinc-ide/share/minizinc/solvers/globalizer.msc"
    },
    "id": "org.minizinc.globalizer",
    "name": "Globalizer",
    "version": "0.1.7.2",
    "mznlib": "../globalizer",
    "executable": "../../../bin/minizinc-globalizer",
    "mznlibVersion": 1,
    "stdFlags": ["--output-html","-v","-p","--json-stream"],
    "extraFlags": [
      ["--no-initial-pass","Don't check for channeling opportunities","bool","true"],
      ["-p","Number of jobs to run in parallel","int","1"],
      ["--maxConstraints","Max constraints per set (2)","int","2"],
      ["--randomSolutions","Number of solutions for submodel (30)","int","30"],
      ["--sampleSolutions","Number of solutions for scoring (30)","int","30"],
      ["--solvingTimeout","Solver timeout 1000(ms)","int","1000"],
      ["--constraintFilterIn","Consider only these comma separated substrings","string",""],
      ["--free-search","Don't use random heuristics","bool","true"],
      ["--debug-args","Debugging info for argument generation","bool","true"],
      ["--debug-constraints","Debugging info for constraint checking","bool","true"],
      ["--debug-scoring","Debugging info for constraint scoring","bool","true"],
      ["--debug-checking","Debugging info for constraint checking","bool","true"],
      ["--debug-norm","Debuginging info for model normalization","bool","true"],
      ["--debug-solving","Debugging info for model solving","bool","true"],
      ["--debug-model","Debugging info for group models","bool","true"],
      ["--debug-high","Debugging info for high-level progress","bool","true"],
      ["--norm-if","Replace if statements containing foralls with foralls with where clauses","bool","true"],
      ["--norm-fi","Replace foralls containing if statements with foralls with where clauses","bool","true"]
    ],
    "tags": ["experimental","tool"],
    "supportsMzn": true,
    "supportsFzn": true,
    "supportsNL": false,
    "needsSolns2Out": true,
    "needsMznExecutable": true,
    "needsStdlibDir": false,
    "needsPathsFile": false,
    "isGUIApplication": false
  },
  {
    "extraInfo": {
      "configFile": "",
      "defaultFlags": ["-DQuadrIntSolverConfig=true","-DQuadrFloatSolverConfig=true"]
    },
    "id": "org.minizinc.mip.gurobi",
    "name": "Gurobi",
    "version": "<unknown version>",
    "mznlib": "-Glinear",
    "mznlibVersion": 1,
    "description": "MIP wrapper for Gurobi library <unknown version>.  Compiled  Jun  7 2023  02:45:57",
    "requiredFlags": ["--gurobi-dll"],
    "stdFlags": ["-i","-p","-s","-v"],
    "tags": ["mip","float","api"],
    "supportsMzn": true,
    "supportsFzn": true,
    "supportsNL": false,
    "needsSolns2Out": true,
    "needsMznExecutable": false,
    "needsStdlibDir": false,
    "needsPathsFile": false,
    "isGUIApplication": false
  },
  {
    "extraInfo": {
      "configFile": ""
    },
    "id": "org.minizinc.mip.highs",
    "name": "HiGHS",
    "version": "1.5.1",
    "mznlib": "-Glinear",
    "mznlibVersion": 1,
    "description": "MIP wrapper for HiGHS 1.5.1\n  Compiled  2023-06-07, git hash 93f1876\n",
    "stdFlags": ["-i","-p","-r","-s","-v"],
    "extraFlags": [
      ["--highs-presolve","Presolve option: \"off\", \"choose\" or \"on\"","string","choose"],
      ["--highs-solver","Solver option: \"simplex\", \"choose\" or \"ipm\". If \"simplex\"/\"ipm\" is chosen then, for a MIP (QP) the integrality constraint (quadratic term) will be ignored","string","choose"],
      ["--highs-parallel","Parallel option: \"off\", \"choose\" or \"on\"","string","choose"],
      ["--highs-run_crossover","Run IPM crossover: \"off\", \"choose\" or \"on\"","string","on"],
      ["--highs-time_limit","Time limit (seconds)","float:0.000000:inf","inf"],
      ["--highs-ranging","Compute cost, bound, RHS and basic solution ranging: \"off\" or \"on\"","string","off"],
      ["--highs-infinite_cost","Limit on cost coefficient: values larger than this will be treated as infinite","float:1000000000000000.000000:inf","100000000000000000000.000000"],
      ["--highs-infinite_bound","Limit on |constraint bound|: values larger than this will be treated as infinite","float:1000000000000000.000000:inf","100000000000000000000.000000"],
      ["--highs-small_matrix_value","Lower limit on |matrix entries|: values smaller than this will be treated as zero","float:0.000000:inf","0.000000"],
      ["--highs-large_matrix_value","Upper limit on |matrix entries|: values larger than this will be treated as infinite","float:1.000000:inf","1000000000000000.000000"],
      ["--highs-primal_feasibility_tolerance","Primal feasibility tolerance","float:0.000000:inf","0.000000"],
      ["--highs-dual_feasibility_tolerance","Dual feasibility tolerance","float:0.000000:inf","0.000000"],
      ["--highs-ipm_optimality_tolerance","IPM optimality tolerance","float:0.000000:inf","0.000000"],
      ["--highs-objective_bound","Objective bound for termination","float:-inf:inf","inf"],
      ["--highs-objective_target","Objective target for termination","float:-inf:inf","-inf"],
      ["--highs-random_seed","random seed used in HiGHS","int:0:2147483647","0"],
      ["--highs-threads","number of threads used by HiGHS (0: automatic)","int:0:2147483647","0"],
      ["--highs-highs_debug_level","Debugging level in HiGHS","int:0:3","0"],
      ["--highs-highs_analysis_level","Analysis level in HiGHS","int:0:63","0"],
      ["--highs-simplex_strategy","Strategy for simplex solver 0 => Choose; 1 => Dual (serial); 2 => Dual (PAMI); 3 => Dual (SIP); 4 => Primal","int:0:4","1"],
      ["--highs-simplex_scale_strategy","Simplex scaling strategy: off / choose / equilibration / forced equilibration / max value 0 / max value 1 (0/1/2/3/4/5)","int:0:5","1"],
      ["--highs-simplex_crash_strategy","Strategy for simplex crash: off / LTSSF / Bixby (0/1/2)","int:0:9","0"],
      ["--highs-simplex_dual_edge_weight_strategy","Strategy for simplex dual edge weights: Choose / Dantzig / Devex / Steepest Edge (-1/0/1/2)","int:-1:2","-1"],
      ["--highs-simplex_primal_edge_weight_strategy","Strategy for simplex primal edge weights: Choose / Dantzig / Devex / Steepest Edge (-1/0/1/2)","int:-1:2","-1"],
      ["--highs-simplex_iteration_limit","Iteration limit for simplex solver","int:0:2147483647","2147483647"],
      ["--highs-simplex_update_limit","Limit on the number of simplex UPDATE operations","int:0:2147483647","5000"],
      ["--highs-simplex_min_concurrency","Minimum level of concurrency in parallel simplex","int:1:8","1"],
      ["--highs-simplex_max_concurrency","Maximum level of concurrency in parallel simplex","int:1:8","8"],
      ["--highs-output_flag","Enables or disables solver output","bool","true"],
      ["--highs-log_to_console","Enables or disables console logging","bool","true"],
      ["--highs-solution_file","Solution file","string",""],
      ["--highs-log_file","Log file","string",""],
      ["--highs-write_solution_to_file","Write the primal and dual solution to a file","bool","false"],
      ["--highs-write_solution_style","Style of solution file (raw = computer-readable, pretty = human-readable): -1 => HiGHS old raw (deprecated); 0 => HiGHS raw; 1 => HiGHS pretty; 2 => Glpsol raw; 3 => Glpsol pretty; 4 => HiGHS sparse raw","int:-1:4","0"],
      ["--highs-glpsol_cost_row_location","Location of cost row for Glpsol file: -2 => Last; -1 => None; 0 => None if empty, otherwise data file location; 1 <= n <= num_row => Location n; n > num_row => Last","int:-2:2147483647","0"],
      ["--highs-icrash","Run iCrash","bool","false"],
      ["--highs-icrash_dualize","Dualise strategy for iCrash","bool","false"],
      ["--highs-icrash_strategy","Strategy for iCrash","string","ICA"],
      ["--highs-icrash_starting_weight","iCrash starting weight","float:0.000000:100000000000000007629769841091887003294964970946560.000000","0.001000"],
      ["--highs-icrash_iterations","iCrash iterations","int:0:200","30"],
      ["--highs-icrash_approx_iter","iCrash approximate minimization iterations","int:0:100","50"],
      ["--highs-icrash_exact","Exact subproblem solution for iCrash","bool","false"],
      ["--highs-icrash_breakpoints","Exact subproblem solution for iCrash","bool","false"],
      ["--highs-write_model_file","Write model file","string",""],
      ["--highs-write_model_to_file","Write the model to a file","bool","false"],
      ["--highs-mip_detect_symmetry","Whether symmetry should be detected","bool","true"],
      ["--highs-mip_max_nodes","MIP solver max number of nodes","int:0:2147483647","2147483647"],
      ["--highs-mip_max_stall_nodes","MIP solver max number of nodes where estimate is above cutoff bound","int:0:2147483647","2147483647"],
      ["--highs-mip_max_leaves","MIP solver max number of leave nodes","int:0:2147483647","2147483647"],
      ["--highs-mip_max_improving_sols","limit on the number of improving solutions found to stop the MIP solver prematurely","int:1:2147483647","2147483647"],
      ["--highs-mip_lp_age_limit","maximal age of dynamic LP rows before they are removed from the LP relaxation","int:0:32767","10"],
      ["--highs-mip_pool_age_limit","maximal age of rows in the cutpool before they are deleted","int:0:1000","30"],
      ["--highs-mip_pool_soft_limit","soft limit on the number of rows in the cutpool for dynamic age adjustment","int:1:2147483647","10000"],
      ["--highs-mip_pscost_minreliable","minimal number of observations before pseudo costs are considered reliable","int:0:2147483647","8"],
      ["--highs-mip_min_cliquetable_entries_for_parallelism","minimal number of entries in the cliquetable before neighborhood queries of the conflict graph use parallel processing","int:0:2147483647","100000"],
      ["--highs-mip_report_level","MIP solver reporting level","int:0:2","1"],
      ["--highs-mip_feasibility_tolerance","MIP feasibility tolerance","float:0.000000:inf","0.000001"],
      ["--highs-mip_heuristic_effort","effort spent for MIP heuristics","float:0.000000:1.000000","0.050000"],
      ["--highs-mip_rel_gap","tolerance on relative gap, |ub-lb|/|ub|, to determine whether optimality has been reached for a MIP instance","float:0.000000:inf","0.000100"],
      ["--highs-mip_abs_gap","tolerance on absolute gap of MIP, |ub-lb|, to determine whether optimality has been reached for a MIP instance","float:0.000000:inf","0.000001"],
      ["--highs-ipm_iteration_limit","Iteration limit for IPM solver","int:0:2147483647","2147483647"],
      ["--highs-log_dev_level","Output development messages: 0 => none; 1 => info; 2 => verbose","int:0:3","0"],
      ["--highs-solve_relaxation","Solve the relaxation of discrete model components","bool","false"],
      ["--highs-allow_unbounded_or_infeasible","Allow ModelStatus::kUnboundedOrInfeasible","bool","false"],
      ["--highs-use_implied_bounds_from_presolve","Use relaxed implied bounds from presolve","bool","false"],
      ["--highs-lp_presolve_requires_basis_postsolve","Prevents LP presolve steps for which postsolve cannot maintain a basis","bool","true"],
      ["--highs-mps_parser_type_free","Use the free format MPS file reader","bool","true"],
      ["--highs-keep_n_rows","For multiple N-rows in MPS files: delete rows / delete entries / keep rows (-1/0/1)","int:-1:1","-1"],
      ["--highs-cost_scale_factor","Scaling factor for costs","int:-20:20","0"],
      ["--highs-allowed_matrix_scale_factor","Largest power-of-two factor permitted when scaling the constraint matrix","int:0:30","20"],
      ["--highs-allowed_cost_scale_factor","Largest power-of-two factor permitted when scaling the costs","int:0:20","0"],
      ["--highs-simplex_dualise_strategy","Strategy for dualising before simplex","int:-1:1","-1"],
      ["--highs-simplex_permute_strategy","Strategy for permuting before simplex","int:-1:1","-1"],
      ["--highs-max_dual_simplex_cleanup_level","Max level of dual simplex cleanup","int:0:2147483647","1"],
      ["--highs-max_dual_simplex_phase1_cleanup_level","Max level of dual simplex phase 1 cleanup","int:0:2147483647","2"],
      ["--highs-simplex_price_strategy","Strategy for PRICE in simplex","int:0:3","3"],
      ["--highs-simplex_unscaled_solution_strategy","Strategy for solving unscaled LP in simplex","int:0:2","1"],
      ["--highs-simplex_initial_condition_check","Perform initial basis condition check in simplex","bool","true"],
      ["--highs-no_unnecessary_rebuild_refactor","No unnecessary refactorization on simplex rebuild","bool","true"],
      ["--highs-simplex_initial_condition_tolerance","Tolerance on initial basis condition in simplex","float:1.000000:inf","100000000000000.000000"],
      ["--highs-rebuild_refactor_solution_error_tolerance","Tolerance on solution error when considering refactorization on simplex rebuild","float:-inf:inf","0.000000"],
      ["--highs-dual_steepest_edge_weight_error_tolerance","Tolerance on dual steepest edge weight errors","float:0.000000:inf","inf"],
      ["--highs-dual_steepest_edge_weight_log_error_threshold","Threshold on dual steepest edge weight errors for Devex switch","float:1.000000:inf","10.000000"],
      ["--highs-dual_simplex_cost_perturbation_multiplier","Dual simplex cost perturbation multiplier: 0 => no perturbation","float:0.000000:inf","1.000000"],
      ["--highs-primal_simplex_bound_perturbation_multiplier","Primal simplex bound perturbation multiplier: 0 => no perturbation","float:0.000000:inf","1.000000"],
      ["--highs-dual_simplex_pivot_growth_tolerance","Dual simplex pivot growth tolerance","float:0.000000:inf","0.000000"],
      ["--highs-presolve_pivot_threshold","Matrix factorization pivot threshold for substitutions in presolve","float:0.000800:0.500000","0.010000"],
      ["--highs-presolve_rule_off","Bit mask of presolve rules that are not allowed","int:0:2147483647","0"],
      ["--highs-presolve_rule_logging","Log effectiveness of presolve rules for LP","bool","false"],
      ["--highs-presolve_substitution_maxfillin","Maximal fillin allowed for substitutions in presolve","int:0:2147483647","10"],
      ["--highs-factor_pivot_threshold","Matrix factorization pivot threshold","float:0.000800:0.500000","0.100000"],
      ["--highs-factor_pivot_tolerance","Matrix factorization pivot tolerance","float:0.000000:1.000000","0.000000"],
      ["--highs-start_crossover_tolerance","Tolerance to be satisfied before IPM crossover will start","float:0.000000:inf","0.000000"],
      ["--highs-use_original_HFactor_logic","Use original HFactor logic for sparse vs hyper-sparse TRANs","bool","true"],
      ["--highs-less_infeasible_DSE_check","Check whether LP is candidate for LiDSE","bool","true"],
      ["--highs-less_infeasible_DSE_choose_row","Use LiDSE if LP has right properties","bool","true"]
    ],
    "tags": ["mip","float","api","highs"],
    "supportsMzn": true,
    "supportsFzn": true,
    "supportsNL": false,
    "needsSolns2Out": true,
    "needsMznExecutable": false,
    "needsStdlibDir": false,
    "needsPathsFile": false,
    "isGUIApplication": false
  },
  {
    "extraInfo": {
      "configFile": "",
      "defaultFlags": ["-DQuadrIntSolverConfig=true","-DQuadrFloatSolverConfig=true","-DCumulativeSolverConfig=true","-DOrbisackSolverConfig=true","-DOrbitopeSolverConfig=true"]
    },
    "id": "org.minizinc.mip.scip",
    "name": "SCIP",
    "version": "<unknown version>",
    "mznlib": "-Glinear",
    "mznlibVersion": 1,
    "description": "MIP wrapper for SCIP <unknown version>. Compiled  Jun  7 2023  02:45:57",
    "requiredFlags": ["--scip-dll"],
    "stdFlags": ["-i","-p","-s"],
    "tags": ["mip","float","api"],
    "supportsMzn": true,
    "supportsFzn": true,
    "supportsNL": false,
    "needsSolns2Out": true,
    "needsMznExecutable": false,
    "needsStdlibDir": false,
    "needsPathsFile": false,
    "isGUIApplication": false
  },
  {
    "extraInfo": {
      "configFile": ""
    },
    "id": "org.minizinc.mip.xpress",
    "name": "Xpress",
    "version": "<unknown version>",
    "mznlib": "-Glinear",
    "mznlibVersion": 1,
    "description": "  MIP wrapper for FICO Xpress Optimiser version <unknown version>.  Compiled  Jun  7 2023  02:45:57",
    "requiredFlags": ["--xpress-dll"],
    "stdFlags": ["-i","-s","-p","-r"],
    "tags": ["mip","float","api"],
    "supportsMzn": true,
    "supportsFzn": true,
    "supportsNL": false,
    "needsSolns2Out": true,
    "needsMznExecutable": false,
    "needsStdlibDir": false,
    "needsPathsFile": false,
    "isGUIApplication": false
  }
]
